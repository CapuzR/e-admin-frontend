type anon_class_18_1 = 
 service {
   addAsset: (AssetRequest) -> (Result_7);
   addCardCollection: (CardCollectionArgs, vec CardArgs) -> (Result);
   deleteCard: (text) -> (Result_6);
   deleteCardCollection: (text) -> (Result);
   getAllCollections: () -> (Result_3) query;
   getCard: (CardArgs) -> (Result_5) query;
   getCardCollection: (text) -> (Result_4) query;
   getCollectionsByQuery: (text) -> (Result_3) query;
   http_request: (Request) -> (Response) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackResponse) query;
   manageAuth: (AuthArgs) -> (Result_2);
   staticStreamingCallback: (StreamingCallbackToken) ->
    (StreamingCallbackResponse) query;
   testQueryA: (CardCollectionArgs) -> ();
   testQueryB: (vec CardArgs) -> ();
   updateCard: (CardArgs) -> (Result_1);
   updateCardCollection: (CardCollectionArgs, vec CardArgs) -> (Result);
 };
type WriteAsset = 
 variant {
   Chunk: record {
            callback: opt Callback;
            chunk: blob;
            id: text;
          };
   Init: record {
           callback: opt Callback;
           id: text;
           size: nat;
         };
 };
type Value__1 = 
 variant {
   Array: vec Value__1;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec Property__1;
   Float: float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Option: opt Value__1;
   Principal: principal;
   Text: text;
 };
type Value = 
 variant {
   Array: vec Value;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec Property;
   Float: float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Option: opt Value;
   Principal: principal;
   Text: text;
 };
type UpdateCardError = 
 variant {
   NonExistentCard;
   NotAuthorized;
   Unknown: text;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type StaticError = 
 variant {
   AlreadyExists;
   AuthorizedPrincipalLimitReached: nat;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotAuthorized;
   NotFound;
   Unauthorized;
 };
type Result_7 = 
 variant {
   err: StaticError;
   ok;
 };
type Result_6 = 
 variant {
   err: CardError;
   ok;
 };
type Result_5 = 
 variant {
   err: CardError;
   ok: Card;
 };
type Result_4 = 
 variant {
   err: CardCollectionError;
   ok: CardCollectionSuccess;
 };
type Result_3 = 
 variant {
   err: CardCollectionError;
   ok: vec CardCollectionSuccess;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: opt vec principal;
 };
type Result_1 = 
 variant {
   err: UpdateCardError;
   ok;
 };
type Result = 
 variant {
   err: CardCollectionError;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type RequestArgs = 
 variant {
   Add: vec principal;
   GetAll;
   IsCallerIn;
   IsIn: principal;
   Remove: principal;
   RemoveAll;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type Property__1 = 
 record {
   name: text;
   value: Value__1;
 };
type Property = 
 record {
   name: text;
   value: Value;
 };
type InitArgs = 
 record {
   admins: opt vec principal;
   allowedUsers: opt vec principal;
   auth: opt vec principal;
   environment: text;
   gameServers: opt vec principal;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FilterDetails = 
 record {
   kind: FieldType;
   name: text;
 };
type Filter = 
 variant {
   BountyRush: vec FilterDetails;
   ElementumGeneral: vec FilterDetails;
   Traits: vec FilterDetails;
 };
type FieldType = 
 variant {
   Checkbox: Checkbox;
   Range: vec nat;
   TextField: text;
 };
type Error = 
 variant {
   NonExistentRole;
   NotAuthorized;
 };
type Checkbox = record {options: vec text;};
type CardSuccess = 
 record {
   collectionName: text;
   id: text;
   index: nat;
   mimeType: text;
   stats: vec CardStats;
   thumbnail: text;
   url: text;
 };
type CardStats__1 = 
 variant {
   BountyRush: vec Property__1;
   ElementumGeneral: vec Property__1;
   Traits: vec Property__1;
 };
type CardStats = 
 variant {
   BountyRush: vec Property;
   ElementumGeneral: vec Property;
   Traits: vec Property;
 };
type CardError = 
 variant {
   CardAlreadyExists;
   NonExistentCard;
   NotAuthorized;
   Unknown: text;
 };
type CardCollectionSuccess = 
 record {
   cards: vec CardSuccess;
   collectionId: text;
   description: text;
   filters: vec Filter;
   haveMultipleAC: bool;
   kind: text;
   loreContext: text;
   name: text;
   standard: text;
 };
type CardCollectionError = 
 variant {
   CardCollectionAlreadyExists;
   NonExistentCardCollection;
   NotAuthorized;
   Unknown: text;
 };
type CardCollectionArgs = 
 record {
   batchUpdate: bool;
   collectionId: text;
   description: text;
   filters: vec Filter;
   haveMultipleAC: bool;
   kind: text;
   loreContext: text;
   name: text;
   standard: text;
 };
type CardArgs = 
 record {
   collectionId: text;
   collectionName: text;
   id: text;
   index: nat;
   mimeType: text;
   stats: vec CardStats;
   thumbnail: text;
   url: text;
 };
type Card = 
 record {
   collectionId: text;
   collectionName: text;
   index: nat;
   mimeType: text;
   stats: vec CardStats__1;
   thumbnail: text;
   url: text;
 };
type Callback = func () -> ();
type AuthArgs = 
 variant {
   Admin: RequestArgs;
   AllowedUsers: RequestArgs;
   Auth: RequestArgs;
   GameServers: RequestArgs;
 };
type AssetRequest = 
 variant {
   Put:
    record {
      callback: opt Callback;
      contentType: text;
      key: text;
      payload: variant {
                 Payload: blob;
                 StagedData;
               };
    };
   Remove: record {
             callback: opt Callback;
             key: text;
           };
   StagedWrite: WriteAsset;
 };
service : (InitArgs) -> anon_class_18_1
