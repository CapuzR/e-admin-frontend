type anon_class_30_1 = 
 service {
   addTournament: (TournamentArgs) -> (Result_6);
   deleteTournament: (text) -> (Result);
   endTournament: (text) -> (Result_5);
   getAllTournaments: () -> (Result_4) query;
   getLeaderboard: (text) -> (Result_3);
   getTournament: (text) -> (Result_2) query;
   manageAuth: (AuthArgs) -> (Result_1);
   updateTournament: (TournamentArgs, text) -> (Result);
 };
type TournamentSuccess = 
 record {
   boostsSetAt: text;
   boostsSetPer: text;
   description: text;
   dynamicExplanation: text;
   endDate: text;
   externalCollections: vec ExternalCollection;
   game: text;
   id: text;
   internalCollections: vec InternalCollection;
   name: text;
   points: nat;
   reward: text;
   startDate: text;
   status: Status;
 };
type TournamentError = 
 variant {
   EmptyStats;
   InitStatAlreadyExists;
   NonExistentCanister;
   NonExistentTournament;
   NotAuthorized;
   TournamentAlreadyExists;
   TournamentHasBeingCanceled;
   TournamentHasntStarted;
   Unknown: text;
 };
type TournamentArgs = 
 record {
   boostsSetAt: text;
   boostsSetPer: text;
   description: text;
   dynamicExplanation: text;
   endDate: text;
   externalCollections: vec ExternalCollection;
   game: text;
   internalCollections: vec InternalCollection;
   name: text;
   points: nat;
   reward: text;
   startDate: text;
   status: Status;
 };
type Status__1 = 
 variant {
   Accepted;
   Denied;
   OnHold;
 };
type Status = 
 variant {
   Active;
   Canceled;
   Finished;
   OnHold;
 };
type Result_6 = 
 variant {
   err: TournamentError;
   ok: text;
 };
type Result_5 = 
 variant {
   err: Error__1;
   ok;
 };
type Result_4 = 
 variant {
   err: TournamentError;
   ok: vec TournamentSuccess;
 };
type Result_3 = 
 variant {
   err: TournamentError;
   ok: record {
         leaderboard: vec PlayerStatsSuccess;
         rewards: text;
       };
 };
type Result_2 = 
 variant {
   err: TournamentError;
   ok: TournamentSuccess;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: opt vec principal;
 };
type Result = 
 variant {
   err: TournamentError;
   ok;
 };
type RequestArgs = 
 variant {
   Add: vec principal;
   GetAll;
   IsCallerIn;
   IsIn: principal;
   Remove: principal;
   RemoveAll;
 };
type PlayerStatsSuccess = 
 record {
   earned: nat;
   lost: nat;
   matchesLost: nat;
   matchesWon: nat;
   points: record {
             externalResults: opt nat;
             internalResults: opt nat;
           };
   "principal": principal;
 };
type InternalCollection = 
 record {
   id: text;
   name: text;
 };
type InitArgs = 
 record {
   admins: opt vec principal;
   allowedUsers: opt vec principal;
   auth: opt vec principal;
   environment: text;
   gameServers: opt vec principal;
 };
type ExternalCollection = 
 record {
   id: text;
   name: text;
 };
type Error__1 = 
 variant {
   NonExistentCanister;
   NonExistentTournament;
   NotAuthorized;
 };
type Error = 
 variant {
   NonExistentRole;
   NotAuthorized;
 };
type AuthArgs = 
 variant {
   Admin: RequestArgs;
   AllowedUsers: RequestArgs;
   Auth: RequestArgs;
   GameServers: RequestArgs;
 };
service : (InitArgs) -> anon_class_30_1
