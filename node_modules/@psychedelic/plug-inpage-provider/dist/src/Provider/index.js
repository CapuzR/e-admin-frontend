"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const agent_1 = require("@dfinity/agent");
const principal_1 = require("@dfinity/principal");
const buffer_1 = require("buffer/");
const domain_metadata_1 = __importDefault(require("../utils/domain-metadata"));
const ic_management_api_1 = require("../utils/ic-management-api");
const constants_1 = require("../constants");
const sign_1 = require("../utils/sign");
const agent_2 = require("../utils/agent");
const bigint_1 = require("../utils/bigint");
const RPCManager_1 = __importDefault(require("../modules/RPCManager"));
const SessionManager_1 = __importDefault(require("../modules/SessionManager"));
const account_1 = require("../utils/account");
const communication_1 = require("../utils/communication");
const wallet_connect_rpc_1 = __importDefault(require("../utils/wallet-connect-rpc"));
class Provider {
    constructor(clientRPC) {
        this.idls = {};
        this.hookToWindowEvents = () => {
            window.addEventListener("updateConnection", () => __awaiter(this, void 0, void 0, function* () {
                const connectionData = yield this.sessionManager.updateConnection();
                const { sessionData } = connectionData || {};
                if (sessionData) {
                    this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
                    this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
                    this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
                }
            }), false);
        };
        this.clientRPC = new RPCManager_1.default({ instance: clientRPC });
        this.sessionManager = new SessionManager_1.default({ rpc: this.clientRPC });
        this.versions = constants_1.versions;
    }
    static createWithWalletConnect(walletConnectOptions) {
        const walletConnectRPC = new wallet_connect_rpc_1.default(walletConnectOptions);
        walletConnectRPC.resetSession();
        return new Provider(walletConnectRPC);
    }
    static exposeProviderWithWalletConnect(walletConnectOptions) {
        const provider = this.createWithWalletConnect(walletConnectOptions);
        const ic = window.ic || {};
        window.ic = Object.assign(Object.assign({}, ic), { plug: provider });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const connectionData = yield this.sessionManager.init();
            const { sessionData } = connectionData || {};
            if (sessionData) {
                this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
                this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
                this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
            }
            this.hookToWindowEvents();
        });
    }
    createActor({ canisterId, interfaceFactory, }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!canisterId || !(0, account_1.validateCanisterId)(canisterId))
                throw Error("a canisterId valid is a required argument");
            if (!interfaceFactory)
                throw Error("interfaceFactory is a required argument");
            const metadata = (0, domain_metadata_1.default)();
            this.idls[canisterId] = (0, sign_1.getArgTypes)(interfaceFactory);
            const connectionData = yield this.sessionManager.getConnectionData();
            const agent = yield (0, agent_2.createAgent)(this.clientRPC, metadata, { whitelist: [canisterId], host: (_a = connectionData === null || connectionData === void 0 ? void 0 : connectionData.connection) === null || _a === void 0 ? void 0 : _a.host }, (0, sign_1.getArgTypes)(interfaceFactory));
            return (0, agent_2.createActor)(agent, canisterId, interfaceFactory);
        });
    }
    getPrincipal({ asString } = { asString: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            const principal = this.principalId;
            if (principal) {
                return asString ? principal.toString() : principal_1.Principal.from(principal);
            }
            else {
                const response = yield this.clientRPC.call({
                    handler: "getPrincipal",
                    args: [metadata.url],
                });
                if (response && asString) {
                    return response.toString();
                }
                return principal_1.Principal.from(response);
            }
        });
    }
    isConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            const connectionData = yield this.sessionManager.getConnectionData();
            const { connection } = connectionData || {};
            return !!connection;
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sessionManager.disconnect();
        });
    }
    requestConnect(args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { sessionData, connection } = yield this.sessionManager.requestConnect(args);
            if (sessionData) {
                this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
                this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
                this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
            }
            return connection === null || connection === void 0 ? void 0 : connection.publicKey;
        });
    }
    createAgent({ whitelist, host, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            this.agent = yield (0, agent_2.createAgent)(this.clientRPC, metadata, { whitelist, host }, null);
            return !!this.agent;
        });
    }
    requestBalance(accountId = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            const balances = yield this.clientRPC.call({
                handler: "requestBalance",
                args: [metadata, accountId],
            });
            return balances.map((balance) => {
                const { value } = balance, rest = __rest(balance, ["value"]);
                return rest;
            });
        });
    }
    requestTransfer(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            return yield this.clientRPC.call({
                handler: "requestTransfer",
                args: [metadata, params],
            });
        });
    }
    batchTransactions(transactions) {
        var transactions_1, transactions_1_1;
        var e_1, _a;
        var _b;
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            const canisterList = transactions.map((transaction) => transaction.canisterId);
            const connectionData = yield this.sessionManager.getConnectionData();
            const sender = (yield this.getPrincipal({ asString: true }));
            const signInfo = transactions
                .map((trx) => (0, sign_1.getSignInfoFromTransaction)(trx, sender))
                .map((trx) => (0, bigint_1.recursiveParseBigint)(Object.assign(Object.assign({}, trx), { arguments: (0, communication_1.bufferToBase64)(buffer_1.Buffer.from(trx.arguments)) })));
            const batchResponse = yield this.clientRPC.call({
                handler: "batchTransactions",
                args: [metadata, signInfo],
            });
            if (!batchResponse.status)
                return false;
            const agent = yield (0, agent_2.createAgent)(this.clientRPC, metadata, {
                whitelist: canisterList,
                host: (_b = connectionData === null || connectionData === void 0 ? void 0 : connectionData.connection) === null || _b === void 0 ? void 0 : _b.host,
            }, null, batchResponse.txId);
            let transactionIndex = 0;
            let prevTransactionsData = [];
            try {
                for (transactions_1 = __asyncValues(transactions); transactions_1_1 = yield transactions_1.next(), !transactions_1_1.done;) {
                    const transaction = transactions_1_1.value;
                    const actor = yield (0, agent_2.createActor)(agent, transaction.canisterId, transaction.idl);
                    const method = actor[transaction.methodName];
                    try {
                        let response;
                        if (typeof transaction.args === "function") {
                            if (prevTransactionsData) {
                                response = yield method(...transaction.args(prevTransactionsData));
                            }
                            if (!prevTransactionsData) {
                                response = yield method(...transaction.args());
                            }
                        }
                        else if (Array.isArray(transaction.args)) {
                            response = yield method(...transaction.args);
                        }
                        else {
                            yield (transaction === null || transaction === void 0 ? void 0 : transaction.onFail("Invalid transaction arguments, must be function or array", prevTransactionsData));
                            break;
                        }
                        if (transaction === null || transaction === void 0 ? void 0 : transaction.onSuccess) {
                            const chainedResponse = yield (transaction === null || transaction === void 0 ? void 0 : transaction.onSuccess(response));
                            if (chainedResponse) {
                                prevTransactionsData = [
                                    ...prevTransactionsData,
                                    { transactionIndex, response: chainedResponse },
                                ];
                            }
                        }
                    }
                    catch (error) {
                        if (transaction === null || transaction === void 0 ? void 0 : transaction.onFail) {
                            yield transaction.onFail(error, prevTransactionsData);
                        }
                        break;
                    }
                    transactionIndex++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (transactions_1_1 && !transactions_1_1.done && (_a = transactions_1.return)) yield _a.call(transactions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        });
    }
    getICNSInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            return yield this.clientRPC.call({
                handler: "getICNSInfo",
                args: [metadata],
            });
        });
    }
    requestBurnXTC(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            return yield this.clientRPC.call({
                handler: "requestBurnXTC",
                args: [metadata, params],
            });
        });
    }
    getManagementCanister() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agent) {
                throw Error("Oops! Agent initialization required.");
            }
            return agent_1.Actor.createActor(ic_management_api_1.managementCanisterIdlFactory, Object.assign({ agent: this.agent, canisterId: ic_management_api_1.managementCanisterPrincipal }, {
                callTransform: ic_management_api_1.transformOverrideHandler,
                queryTransform: ic_management_api_1.transformOverrideHandler,
            }));
        });
    }
    requestImportToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = (0, domain_metadata_1.default)();
            return yield this.clientRPC.call({
                handler: "requestImportToken",
                args: [metadata, params],
            });
        });
    }
}
exports.default = Provider;
