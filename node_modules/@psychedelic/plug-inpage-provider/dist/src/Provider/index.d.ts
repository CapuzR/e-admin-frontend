import { Agent, ActorSubclass, PublicKey } from "@dfinity/agent";
import { Principal } from "@dfinity/principal";
import { CreateAgentParams } from "../utils/agent";
import { CreateActor, ICNSInfo, ProviderInterface, ProviderInterfaceVersions, RequestBurnXTCParams, RequestConnectParams, RequestImportTokenParams, RequestTransferParams, SimplifiedRPC, Transaction, WalletConnectOptions } from "./interfaces";
export default class Provider implements ProviderInterface {
    agent?: Agent;
    versions: ProviderInterfaceVersions;
    principalId?: string;
    accountId?: string;
    private clientRPC;
    private sessionManager;
    private idls;
    static createWithWalletConnect(walletConnectOptions: WalletConnectOptions): Provider;
    static exposeProviderWithWalletConnect(walletConnectOptions: WalletConnectOptions): void;
    constructor(clientRPC: SimplifiedRPC);
    init(): Promise<void>;
    createActor<T>({ canisterId, interfaceFactory, }: CreateActor<T>): Promise<ActorSubclass<T>>;
    getPrincipal({ asString }?: {
        asString: boolean;
    }): Promise<Principal | string>;
    isConnected(): Promise<boolean>;
    disconnect(): Promise<void>;
    requestConnect(args?: RequestConnectParams): Promise<PublicKey>;
    createAgent({ whitelist, host, }?: CreateAgentParams): Promise<any>;
    requestBalance(accountId?: null): Promise<bigint>;
    requestTransfer(params: RequestTransferParams): Promise<bigint>;
    batchTransactions(transactions: Transaction[]): Promise<boolean>;
    getICNSInfo(): Promise<ICNSInfo>;
    requestBurnXTC(params: RequestBurnXTCParams): Promise<any>;
    getManagementCanister(): Promise<ActorSubclass<Record<string, import("@dfinity/agent").ActorMethod<unknown[], unknown>>>>;
    requestImportToken(params: RequestImportTokenParams): Promise<any>;
    private hookToWindowEvents;
}
