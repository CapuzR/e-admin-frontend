import RPCManager from "../RPCManager";
import { RequestConnectParams } from "../../Provider/interfaces";
import { HttpAgent, PublicKey } from "@dfinity/agent";
declare type SessionData = {
    agent: HttpAgent;
    principalId: string;
    accountId: string;
} | null;
export declare type ConnectionData = {
    sessionData: SessionData;
    connection: RequestConnectParams & {
        publicKey: PublicKey;
    };
};
interface SessionManagerOptions {
    rpc: RPCManager;
    whitelist?: string[];
    host?: string;
    timeout?: number;
}
export default class SessionManager {
    host: any;
    whitelist: string[];
    timeout: number;
    private rpc;
    private sessionData;
    private initialized;
    private onConnectionUpdate?;
    constructor({ host, whitelist, timeout, rpc }: SessionManagerOptions);
    getSession(): SessionData;
    private createSession;
    init(): Promise<ConnectionData | null>;
    getConnectionData(): Promise<ConnectionData | null>;
    requestConnect(args?: RequestConnectParams): Promise<ConnectionData>;
    disconnect(): Promise<void>;
    updateConnection(): Promise<ConnectionData | null>;
}
export {};
