"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlugIdentity = void 0;
const agent_1 = require("@dfinity/agent");
const principal_1 = require("@dfinity/principal");
class PlugIdentity extends agent_1.SignIdentity {
    constructor(publicKey, whitelist) {
        super();
        this.publicKey = Object.assign(Object.assign({}, publicKey), { toDer: () => { var _a, _b; return (_b = (_a = publicKey.derKey) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : publicKey.derKey; } });
        this.whitelist = whitelist || [];
    }
    getPublicKey() {
        return this.publicKey;
    }
    sign(_blob, _signInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            throw "DONT USE SIGN FROM IDENTITY";
        });
    }
    getPrincipal() {
        if (!this._principal) {
            this._principal = principal_1.Principal.selfAuthenticating(this.publicKey.toDer());
        }
        return this._principal;
    }
}
exports.PlugIdentity = PlugIdentity;
