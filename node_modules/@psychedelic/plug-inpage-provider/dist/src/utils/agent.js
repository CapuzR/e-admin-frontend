"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createActor = exports.createAgent = exports.privateCreateAgent = void 0;
const agent_1 = require("@dfinity/agent");
const constants_1 = require("../constants");
const identity_1 = require("../identity");
const agent_2 = require("./factories/agent");
const DEFAULT_HOST = constants_1.IC_MAINNET_URLS[0];
const DEFAULT_CREATE_AGENT_ARGS = {
    whitelist: [],
    host: DEFAULT_HOST,
};
class PlugAgent extends agent_1.HttpAgent {
    constructor(options = {}, clientRPC, idl, batchTxId = "") {
        super(options);
        this["query"] = (0, agent_2.queryMethodFactory)(clientRPC, batchTxId);
        this["call"] = (0, agent_2.callMethodFactory)(clientRPC, batchTxId, idl);
        this["readState"] = (0, agent_2.readStateMethodFactory)(clientRPC, batchTxId);
    }
}
const privateCreateAgent = ({ publicKey, clientRPC, idl = null, batchTxId = "", whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist, host = DEFAULT_CREATE_AGENT_ARGS.host, }) => __awaiter(void 0, void 0, void 0, function* () {
    const identity = new identity_1.PlugIdentity(publicKey, whitelist);
    const agent = new PlugAgent({
        identity,
        host,
    }, clientRPC, idl, batchTxId);
    if (!constants_1.IC_MAINNET_URLS.includes(host)) {
        yield agent.fetchRootKey();
    }
    return agent;
});
exports.privateCreateAgent = privateCreateAgent;
const createAgent = (clientRPC, metadata, { whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist, host = DEFAULT_CREATE_AGENT_ARGS.host, }, idl = null, batchTxId = "") => __awaiter(void 0, void 0, void 0, function* () {
    const publicKey = yield clientRPC.call({
        handler: "verifyWhitelist",
        args: [metadata, whitelist],
    });
    const agent = yield (0, exports.privateCreateAgent)({
        publicKey,
        clientRPC,
        idl,
        batchTxId,
        whitelist,
        host,
    });
    return agent;
});
exports.createAgent = createAgent;
const createActor = (agent, canisterId, interfaceFactory) => __awaiter(void 0, void 0, void 0, function* () {
    return agent_1.Actor.createActor(interfaceFactory, {
        agent: agent,
        canisterId,
    });
});
exports.createActor = createActor;
