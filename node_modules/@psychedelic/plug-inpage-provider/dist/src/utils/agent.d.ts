import { HttpAgent, ActorSubclass, HttpAgentOptions } from "@dfinity/agent";
import RPCManager from "../modules/RPCManager";
import { SerializedPublicKey } from "../Provider/interfaces";
export interface CreateAgentParams {
    whitelist?: string[];
    host?: string;
}
declare class PlugAgent extends HttpAgent {
    constructor(options: HttpAgentOptions | undefined, clientRPC: RPCManager, idl: {
        [key: string]: any;
    } | null, batchTxId?: string);
}
interface PrivateCreateAgentParams {
    publicKey: SerializedPublicKey;
    clientRPC: any;
    idl?: {
        [key: string]: any;
    } | null;
    batchTxId?: string;
    whitelist?: Array<string>;
    host?: string;
}
export declare const privateCreateAgent: ({ publicKey, clientRPC, idl, batchTxId, whitelist, host, }: PrivateCreateAgentParams) => Promise<PlugAgent>;
export declare const createAgent: (clientRPC: any, metadata: any, { whitelist, host, }: CreateAgentParams, idl?: {
    [key: string]: any;
} | null, batchTxId?: string) => Promise<PlugAgent>;
export declare const createActor: <T>(agent: any, canisterId: any, interfaceFactory: any) => Promise<ActorSubclass<T>>;
export {};
