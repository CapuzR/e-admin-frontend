"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestIdOf = exports.hash = exports.toHex = void 0;
const js_sha256_1 = require("js-sha256");
const borc_1 = __importDefault(require("borc"));
const buffer_1 = require("buffer/");
const candid_1 = require("@dfinity/candid");
const principal_1 = require("@dfinity/principal");
const text_encoding_shim_1 = require("text-encoding-shim");
function toHex(requestId) {
    return (0, candid_1.blobToHex)(requestId);
}
exports.toHex = toHex;
function hash(data) {
    const hashed = js_sha256_1.sha256.create().update(data).arrayBuffer();
    return (0, candid_1.blobFromUint8Array)(new Uint8Array(hashed));
}
exports.hash = hash;
function hashValue(value) {
    if (value instanceof borc_1.default.Tagged) {
        return hashValue(value.value);
    }
    else if (typeof value === "string") {
        return hashString(value);
    }
    else if (typeof value === "number") {
        return hash((0, candid_1.lebEncode)(value));
    }
    else if (buffer_1.Buffer.isBuffer(value)) {
        return hash((0, candid_1.blobFromUint8Array)(new Uint8Array(value)));
    }
    else if (value instanceof Uint8Array || value instanceof ArrayBuffer) {
        return hash((0, candid_1.blobFromUint8Array)(new Uint8Array(value)));
    }
    else if (Array.isArray(value)) {
        const vals = value.map(hashValue);
        return hash(buffer_1.Buffer.concat(vals));
    }
    else if (value instanceof principal_1.Principal) {
        return hash((0, candid_1.blobFromUint8Array)(value.toUint8Array()));
    }
    else if (value._isPrincipal) {
        return hash((0, candid_1.blobFromUint8Array)(value._arr));
    }
    else if (typeof value === "object" &&
        value !== null &&
        typeof value.toHash === "function") {
        return hashValue(value.toHash());
    }
    else if (typeof value === "bigint") {
        return hash((0, candid_1.lebEncode)(value));
    }
    throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value} of type ${typeof value}`), {
        value,
    });
}
const hashString = (value) => {
    const encoder = new text_encoding_shim_1.TextEncoder('utf-8');
    const encoded = encoder.encode(value);
    return hash(buffer_1.Buffer.from(encoded));
};
function concat(bs) {
    return (0, candid_1.blobFromBuffer)(buffer_1.Buffer.concat(bs));
}
function requestIdOf(request) {
    const hashed = Object.entries(request)
        .filter(([, value]) => value !== undefined)
        .map(([key, value]) => {
        const hashedKey = hashString(key);
        const hashedValue = hashValue(value);
        return [hashedKey, hashedValue];
    });
    const traversed = hashed;
    const sorted = traversed.sort(([k1], [k2]) => {
        return buffer_1.Buffer.compare(buffer_1.Buffer.from(k1), buffer_1.Buffer.from(k2));
    });
    const concatenated = concat(sorted.map(concat));
    const requestId = hash(concatenated);
    return requestId;
}
exports.requestIdOf = requestIdOf;
