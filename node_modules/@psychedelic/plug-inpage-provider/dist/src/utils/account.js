"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateToken = exports.validateCanisterId = exports.validateAccountId = exports.validatePrincipalId = exports.isValidPrincipal = exports.ALPHANUM_REGEX = exports.CANISTER_MAX_LENGTH = exports.PRINCIPAL_REGEX = exports.getAccountId = void 0;
const crypto_js_1 = __importDefault(require("crypto-js"));
const principal_1 = require("@dfinity/principal");
const buffer_1 = require("buffer/");
const crypto_1 = require("./crypto");
const ACCOUNT_DOMAIN_SEPERATOR = "\x0Aaccount-id";
const SUB_ACCOUNT_ZERO = buffer_1.Buffer.alloc(32);
const getAccountId = (principal, subAccount) => {
    const sha = crypto_js_1.default.algo.SHA224.create();
    sha.update(ACCOUNT_DOMAIN_SEPERATOR);
    sha.update((0, crypto_1.byteArrayToWordArray)(principal.toUint8Array()));
    const subBuffer = buffer_1.Buffer.from(SUB_ACCOUNT_ZERO);
    if (subAccount) {
        subBuffer.writeUInt32BE(subAccount, 0);
    }
    sha.update((0, crypto_1.byteArrayToWordArray)(subBuffer));
    const hash = sha.finalize();
    const byteArray = (0, crypto_1.wordArrayToByteArray)(hash, 28);
    const checksum = (0, crypto_1.generateChecksum)(new Uint8Array(byteArray));
    const val = checksum + hash.toString();
    return val;
};
exports.getAccountId = getAccountId;
exports.PRINCIPAL_REGEX = /(\w{5}-){10}\w{3}/;
exports.CANISTER_MAX_LENGTH = 27;
exports.ALPHANUM_REGEX = /^[a-zA-Z0-9]+$/;
const isValidPrincipal = (text) => principal_1.Principal.fromText(text).toText() === text;
exports.isValidPrincipal = isValidPrincipal;
const validatePrincipalId = (text) => {
    try {
        return Boolean(exports.PRINCIPAL_REGEX.test(text) && (0, exports.isValidPrincipal)(text));
    }
    catch (e) {
        return false;
    }
};
exports.validatePrincipalId = validatePrincipalId;
const validateAccountId = (text) => text.length === 64 && exports.ALPHANUM_REGEX.test(text);
exports.validateAccountId = validateAccountId;
const validateCanisterId = (text) => {
    try {
        return Boolean(text.length <= exports.CANISTER_MAX_LENGTH && (0, exports.isValidPrincipal)(text));
    }
    catch (e) {
        return false;
    }
};
exports.validateCanisterId = validateCanisterId;
const validateToken = (metadata) => Boolean(!!metadata.decimal && !!metadata.name && !!metadata.symbol);
exports.validateToken = validateToken;
