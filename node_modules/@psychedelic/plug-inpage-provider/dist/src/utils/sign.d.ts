import { IDL, JsonValue } from "@dfinity/candid";
import { Buffer } from "buffer/";
import { Transaction } from "../Provider/interfaces";
export interface SignInfo {
    methodName?: string;
    requestType?: string;
    canisterId?: string;
    sender?: string;
    arguments?: Buffer;
    decodedArguments?: JsonValue;
}
export interface AssuredSignInfo {
    methodName: string;
    requestType: string;
    canisterId: string;
    sender: string;
    arguments: Buffer;
    decodedArguments?: JsonValue;
    preApprove: boolean;
}
export declare type ArgsTypesOfCanister = {
    [key: string]: {
        [key: string]: any;
    };
};
export declare const canDecodeArgs: (signInfo: SignInfo | undefined, argsTypes: ArgsTypesOfCanister) => boolean;
export declare const getSignInfoFromTransaction: (transaction: Transaction, sender: string) => AssuredSignInfo;
export declare const decodeArgs: (signInfo: SignInfo, argsTypes: ArgsTypesOfCanister) => JsonValue[] | undefined;
export declare const signFactory: (clientRPC: any, argsTypes: ArgsTypesOfCanister, preApprove?: boolean) => (payload: ArrayBuffer, signInfo?: SignInfo) => Promise<ArrayBuffer>;
export declare const getArgTypes: (interfaceFactory: IDL.InterfaceFactory) => {
    [key: string]: any;
};
