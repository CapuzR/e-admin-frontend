var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { IC_MAINNET_URLS, PLUG_PROXY_HOST } from "../../constants";
import getDomainMetadata from "../../utils/domain-metadata";
import { getAccountId } from "../../utils/account";
import { privateCreateAgent } from "../../utils/agent";
export default class SessionManager {
    constructor({ host, whitelist, timeout, rpc }) {
        this.sessionData = null;
        this.initialized = false;
        this.host = host || IC_MAINNET_URLS[0];
        this.whitelist = whitelist || [];
        this.timeout = timeout || 120000;
        this.rpc = rpc;
    }
    getSession() {
        return this.sessionData;
    }
    createSession(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const agent = yield privateCreateAgent({
                publicKey,
                clientRPC: this.rpc,
                whitelist: this.whitelist || [],
                host: this.host || PLUG_PROXY_HOST,
            });
            const principal = yield agent.getPrincipal();
            const principalId = principal.toString();
            const accountId = yield getAccountId(principal);
            this.sessionData = { agent, principalId, accountId };
            return this.sessionData;
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            let connData = null;
            if (!this.initialized) {
                connData = yield this.getConnectionData();
                this.initialized = true;
            }
            return connData;
        });
    }
    getConnectionData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initialized)
                return null;
            const metadata = getDomainMetadata();
            const connection = yield this.rpc.call({
                handler: "getConnectionData",
                args: [metadata.url],
            });
            let sessionData = null;
            if (connection) {
                this.host = connection.host;
                this.whitelist = connection.whitelist;
                this.timeout = connection.timeout;
                sessionData = yield this.createSession(connection.publicKey);
            }
            return { sessionData, connection };
        });
    }
    requestConnect(args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { whitelist = [], host = PLUG_PROXY_HOST, timeout = 120000 } = args;
            const metadata = getDomainMetadata();
            const publicKey = yield this.rpc.call({
                handler: "requestConnect",
                args: [metadata, whitelist, timeout, host],
            });
            this.host = host;
            this.whitelist = whitelist;
            this.timeout = timeout;
            this.onConnectionUpdate = args === null || args === void 0 ? void 0 : args.onConnectionUpdate;
            const sessionData = yield this.createSession(publicKey);
            return { sessionData, connection: { host, whitelist, timeout, publicKey } };
        });
    }
    disconnect() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = getDomainMetadata();
            yield this.rpc.call({
                handler: "disconnect",
                args: [metadata.url, (_a = this.sessionData) === null || _a === void 0 ? void 0 : _a.principalId],
            });
            this.sessionData = null;
        });
    }
    updateConnection() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.getConnectionData();
            if (data) {
                (_a = this.onConnectionUpdate) === null || _a === void 0 ? void 0 : _a.call(this, data);
            }
            return data;
        });
    }
}
;
