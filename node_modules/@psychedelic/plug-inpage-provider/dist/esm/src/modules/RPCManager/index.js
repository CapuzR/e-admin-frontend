var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import getDomainMetadata from "../../utils/domain-metadata";
const DEFAULT_CONFIG = {
    timeout: 0,
    target: "",
};
export default class RPCManager {
    constructor({ instance }) {
        this.instance = instance;
        this.instance.start();
    }
    call({ handler, args, config = DEFAULT_CONFIG }) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = getDomainMetadata();
            const handleCallSuccess = (result) => result;
            const handleCallFailure = (error) => __awaiter(this, void 0, void 0, function* () {
                const { message } = error || {};
                const errorHandler = message === "Request Timeout" ? "handleTimeout" : "handleError";
                return yield this.instance.call(errorHandler, [metadata, message], DEFAULT_CONFIG);
            });
            return this.instance
                .call(handler, args, config)
                .then(handleCallSuccess, handleCallFailure);
        });
    }
}
