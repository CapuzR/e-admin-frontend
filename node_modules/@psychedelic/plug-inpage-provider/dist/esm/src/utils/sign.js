var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { IDL } from "@dfinity/candid";
import { Buffer } from "buffer/";
import { recursiveParseBigint } from "./bigint";
import getDomainMetadata from "./domain-metadata";
export const canDecodeArgs = (signInfo, argsTypes) => {
    var _a;
    return !!((signInfo === null || signInfo === void 0 ? void 0 : signInfo.canisterId) &&
        (signInfo === null || signInfo === void 0 ? void 0 : signInfo.methodName) &&
        (signInfo === null || signInfo === void 0 ? void 0 : signInfo.arguments) &&
        ((_a = argsTypes[signInfo.canisterId]) === null || _a === void 0 ? void 0 : _a[signInfo.methodName]));
};
export const getSignInfoFromTransaction = (transaction, sender) => {
    var _a;
    const interfaceFactory = transaction.idl({ IDL });
    const [methodName, func] = ((_a = interfaceFactory === null || interfaceFactory === void 0 ? void 0 : interfaceFactory._fields) === null || _a === void 0 ? void 0 : _a.find(([methodName, _func]) => methodName === transaction.methodName)) || [undefined, undefined];
    const decodedArguments = Array.isArray(transaction.args)
        ? transaction.args
        : undefined;
    return {
        methodName: methodName || transaction.methodName,
        canisterId: transaction.canisterId,
        sender,
        arguments: decodedArguments && Array.isArray(transaction.args) && func
            ? IDL.encode(func.argTypes, transaction.args)
            : Buffer.from([]),
        decodedArguments,
        preApprove: false,
        requestType: "unknown",
    };
};
export const decodeArgs = (signInfo, argsTypes) => {
    if (canDecodeArgs(signInfo, argsTypes)) {
        const assuredSignInfo = signInfo;
        const funArgumentsTypes = argsTypes[assuredSignInfo.canisterId][assuredSignInfo.methodName];
        return IDL.decode(funArgumentsTypes, assuredSignInfo.arguments);
    }
};
export const signFactory = (clientRPC, argsTypes, preApprove = false) => (payload, signInfo) => __awaiter(void 0, void 0, void 0, function* () {
    const metadata = getDomainMetadata();
    const payloadArr = new Uint8Array(payload);
    if (signInfo)
        signInfo.decodedArguments = signInfo.arguments
            ? recursiveParseBigint(decodeArgs(signInfo, argsTypes))
            : [];
    const res = yield clientRPC.call({
        handler: "requestSign",
        args: [payloadArr, metadata, Object.assign(Object.assign({}, signInfo), { preApprove })],
    });
    return new Uint8Array(Object.values(res));
});
export const getArgTypes = (interfaceFactory) => {
    const service = interfaceFactory({ IDL });
    const methodArgType = {};
    service._fields.forEach(([methodName, fun]) => (methodArgType[methodName] = fun.argTypes));
    return methodArgType;
};
