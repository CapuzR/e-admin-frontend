var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { HttpAgent, Actor, } from "@dfinity/agent";
import { IC_MAINNET_URLS } from "../constants";
import { PlugIdentity } from "../identity";
import { queryMethodFactory, callMethodFactory, readStateMethodFactory, } from "./factories/agent";
const DEFAULT_HOST = IC_MAINNET_URLS[0];
const DEFAULT_CREATE_AGENT_ARGS = {
    whitelist: [],
    host: DEFAULT_HOST,
};
class PlugAgent extends HttpAgent {
    constructor(options = {}, clientRPC, idl, batchTxId = "") {
        super(options);
        this["query"] = queryMethodFactory(clientRPC, batchTxId);
        this["call"] = callMethodFactory(clientRPC, batchTxId, idl);
        this["readState"] = readStateMethodFactory(clientRPC, batchTxId);
    }
}
export const privateCreateAgent = ({ publicKey, clientRPC, idl = null, batchTxId = "", whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist, host = DEFAULT_CREATE_AGENT_ARGS.host, }) => __awaiter(void 0, void 0, void 0, function* () {
    const identity = new PlugIdentity(publicKey, whitelist);
    const agent = new PlugAgent({
        identity,
        host,
    }, clientRPC, idl, batchTxId);
    if (!IC_MAINNET_URLS.includes(host)) {
        yield agent.fetchRootKey();
    }
    return agent;
});
export const createAgent = (clientRPC, metadata, { whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist, host = DEFAULT_CREATE_AGENT_ARGS.host, }, idl = null, batchTxId = "") => __awaiter(void 0, void 0, void 0, function* () {
    const publicKey = yield clientRPC.call({
        handler: "verifyWhitelist",
        args: [metadata, whitelist],
    });
    const agent = yield privateCreateAgent({
        publicKey,
        clientRPC,
        idl,
        batchTxId,
        whitelist,
        host,
    });
    return agent;
});
export const createActor = (agent, canisterId, interfaceFactory) => __awaiter(void 0, void 0, void 0, function* () {
    return Actor.createActor(interfaceFactory, {
        agent: agent,
        canisterId,
    });
});
