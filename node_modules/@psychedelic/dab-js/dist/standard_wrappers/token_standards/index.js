"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseBalance = exports.createTokenActor = void 0;
const actorFactory_1 = require("../../utils/actorFactory");
const methods_1 = __importDefault(require("./methods"));
const xtcMethods_1 = __importDefault(require("./xtcMethods"));
const extMethods_1 = __importDefault(require("./extMethods"));
const dip20Methods_1 = __importDefault(require("./dip20Methods"));
const ext_did_1 = __importDefault(require("../../idls/ext.did"));
const xtc_did_1 = __importDefault(require("../../idls/xtc.did"));
const dip_20_did_1 = __importDefault(require("../../idls/dip_20.did"));
const ledger_did_1 = __importDefault(require("../../idls/ledger.did"));
const standards_1 = require("../../constants/standards");
const wicp_did_1 = __importDefault(require("../../idls/wicp.did"));
const wicpMethods_1 = __importDefault(require("./wicpMethods"));
const rosettaMethods_1 = __importDefault(require("./rosettaMethods"));
const icpStandardMethods_1 = __importDefault(require("./icpStandardMethods"));
const getMethods = (standard) => ({
    [standards_1.TOKEN.xtc]: xtcMethods_1.default,
    [standards_1.TOKEN.ext]: extMethods_1.default,
    [standards_1.TOKEN.dip20]: dip20Methods_1.default,
    [standards_1.TOKEN.wicp]: wicpMethods_1.default,
    [standards_1.TOKEN.rosetta]: rosettaMethods_1.default,
    [standards_1.TOKEN.icp]: icpStandardMethods_1.default,
}[standard] || methods_1.default);
const getIdl = (standard) => {
    const idl = {
        [standards_1.TOKEN.xtc]: xtc_did_1.default,
        [standards_1.TOKEN.ext]: ext_did_1.default,
        [standards_1.TOKEN.dip20]: dip_20_did_1.default,
        [standards_1.TOKEN.wicp]: wicp_did_1.default,
        [standards_1.TOKEN.rosetta]: ledger_did_1.default,
        [standards_1.TOKEN.icp]: ledger_did_1.default
    }[standard];
    if (!idl)
        throw new Error(`Standard ${standard} Not Implemented`);
    return idl;
};
const createTokenActor = (canisterId, agent, standard) => __awaiter(void 0, void 0, void 0, function* () {
    const idl = getIdl(standard);
    const actor = new ((0, actorFactory_1.createExtendedActorClass)(agent, getMethods(standard), canisterId, idl))();
    return actor;
});
exports.createTokenActor = createTokenActor;
const parseBalance = (balance) => {
    return (parseInt(balance.value, 10) / Math.pow(10, balance.decimals)).toString();
};
exports.parseBalance = parseBalance;
exports.default = {};
