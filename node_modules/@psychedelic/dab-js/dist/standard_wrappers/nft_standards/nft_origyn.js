"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const agent_1 = require("@dfinity/agent");
const nft_origyn_did_1 = __importDefault(require("../../idls/nft_origyn.did"));
const default_1 = __importDefault(require("./default"));
const standards_1 = require("../../constants/standards");
class NFTOrigyn extends default_1.default {
    constructor(canisterId, agent) {
        super(canisterId, agent);
        this.standard = standards_1.NFT.nftOrigyn;
        this.serializeTokenData = (tokenData) => {
            if ('err' in tokenData)
                throw new Error(Object.keys(tokenData.err)[0]);
            const metadata = tokenData.ok.metadata;
            const tokenID = metadata.Class.find(({ name }) => name === "id").value.Text;
            return {
                index: tokenID,
                canister: this.canisterId,
                url: `https://${this.canisterId}.raw.ic0.app/-/${tokenID}`,
                name: tokenID,
                metadata: metadata,
                standard: this.standard,
            };
        };
        this.actor = agent_1.Actor.createActor(nft_origyn_did_1.default, {
            agent,
            canisterId,
        });
    }
    getUserTokens(principal) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokensIndexes = yield this.actor.balance_of_nft_origyn({ principal });
            if ('err' in tokensIndexes) {
                throw new Error(Object.keys(tokensIndexes.err)[0]);
            }
            const tokensData = yield Promise.all(tokensIndexes.ok.nfts.map((item) => __awaiter(this, void 0, void 0, function* () {
                const userTokensResult = yield this.actor.nft_origyn(item);
                if ('err' in userTokensResult)
                    throw new Error(Object.keys(userTokensResult.err)[0]);
                return { detail: userTokensResult, principal };
            })));
            return tokensData.map((token) => this.serializeTokenData(token.detail));
        });
    }
    getMetadata() {
        throw new Error('Method not implemented.');
    }
    transfer(to, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const from = yield this.agent.getPrincipal();
            const balance = yield this.actor.balance_of_nft_origyn({ principal: to });
            if ('err' in balance) {
                throw new Error(Object.keys(balance.err)[0]);
            }
            const escrow = balance.ok.escrow.find(({ token_id }) => token_id === tokenIndex);
            if (!escrow) {
                // This error occurs if no pending escrows for this NFT exist (see market_transfer_nft_origyn comment)
                throw new Error("No pending escrows for transfer.");
            }
            // market transfer relies on escrow(payment) existing for NFT, to only be able to sell NFTs directly thru canister
            // there is owner_transfer_nft_origyn which take "from" and "to" params, but that method is not preferred
            const transferResult = yield this.actor.market_transfer_nft_origyn({
                'token_id': tokenIndex,
                'sales_config': {
                    pricing: { 'instant': null },
                    escrow_receipt: [escrow]
                },
            });
            if ('err' in transferResult)
                throw new Error(Object.keys(transferResult.err)[0]);
        });
    }
    details(tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenData = yield this.actor.nft_origyn(tokenIndex);
            return this.serializeTokenData(tokenData);
        });
    }
}
exports.default = NFTOrigyn;
