"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const agent_1 = require("@dfinity/agent");
const principal_1 = require("@dfinity/principal");
const _1 = require(".");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const standard_registry_1 = __importDefault(require("./registries/standard_registry"));
const constants_1 = require("./constants");
const USER_PID = '6cm3n-tcbbt-oywdv-hpf2y-7ltfa-gvf7z-cfgaj-4j33n-lqutr-yzwuz-hqe';
const CRONICS_ID = 'e3izy-jiaaa-aaaah-qacbq-cai';
const WICP_ID = 'utozz-siaaa-aaaam-qaaxq-cai';
/* Tests the name and get methods for the registry. (cannot test add/remove on mainnet) */
const testRegistryMethods = (registry, getId) => __awaiter(void 0, void 0, void 0, function* () {
    const name = yield registry.name();
    console.log('Registry Name: ', name);
    console.log('Getting metadata for id', getId);
    const getResponse = yield registry.get(getId);
    console.log('Get Response: ', getResponse);
});
const testRouterRegistry = () => __awaiter(void 0, void 0, void 0, function* () {
    const routerId = "bygbm-6aaaa-aaaah-abbjq-cai";
    const nftRegistryId = "ctqxp-yyaaa-aaaah-abbda-cai";
    const routerRegistry = new standard_registry_1.default(routerId);
    // Test it has an entry for the NFT regsistry
    yield testRegistryMethods(routerRegistry, nftRegistryId);
});
const testNFTRegistry = () => __awaiter(void 0, void 0, void 0, function* () {
    const nftRegistry = new _1.NFTRegistry();
    // Test it has an entry for cronics
    yield testRegistryMethods(nftRegistry, CRONICS_ID);
    // get all
    const allNFTs = yield nftRegistry.getAll();
    console.log('All NFTs length', allNFTs.length);
    // get all wrapper
    const allNFTsWrapper = yield (0, _1.getAllNFTS)();
    console.log('Get All wrapper length:', allNFTsWrapper.length);
    // getNFTInfo
    const cronicsInfo = yield (0, _1.getNFTInfo)({ nftCanisterId: CRONICS_ID });
    console.log('Cronics Info:', cronicsInfo);
    // create a cronics actor and get info
    const cronics = (0, _1.getNFTActor)({ canisterId: CRONICS_ID, standard: 'EXT', agent: new agent_1.HttpAgent({ fetch: cross_fetch_1.default, host: constants_1.IC_HOST }) });
    const firstCronic = yield cronics.details(1);
    console.log('First Cronic:', firstCronic);
    // Get my cronics
    const userCronics = yield cronics.getUserTokens(principal_1.Principal.from(USER_PID));
    console.log('User Cronics:', userCronics);
    // Get my nfts
    const userNfts = yield (0, _1.getAllUserNFTs)({ user: principal_1.Principal.from(USER_PID) });
    console.log('My NFTs', userNfts);
    // Get my batched nfts
    const batchedNFTs = yield (0, _1.getBatchedNFTs)({ principal: principal_1.Principal.from(USER_PID) });
    console.log('Batched NFTs', batchedNFTs);
    const cachedNFTs = yield (0, _1.getCachedUserNFTs)({ userPID: USER_PID });
    console.log('Cached NFTs', cachedNFTs);
});
const testTokenRegistry = () => __awaiter(void 0, void 0, void 0, function* () {
    const tokenRegistry = new _1.TokenRegistry();
    // Test it has an entry for cronics
    yield testRegistryMethods(tokenRegistry, WICP_ID);
    // get all
    const allTokens = yield tokenRegistry.getAll();
    console.log('All Tokens', allTokens);
    // create a WICP actor and get info
    const wicp = yield (0, _1.getTokenActor)({ canisterId: WICP_ID, standard: 'DIP20', agent: new agent_1.HttpAgent({ fetch: cross_fetch_1.default, host: constants_1.IC_HOST }) });
    console.log('WICP actor', wicp);
    const wicpMeta = yield wicp.getMetadata();
    console.log('WICP metadata:', wicpMeta);
    const wicpBalance = yield wicp.getBalance(principal_1.Principal.from(USER_PID));
    console.log('WICP balance:', wicpBalance);
    // Wrapper get tokens
    const wrapperAllTokens = yield (0, _1.getTokens)();
    console.log('Wrapper All Tokens', wrapperAllTokens);
});
const testCanisterRegistry = () => __awaiter(void 0, void 0, void 0, function* () {
    const canisterRegistry = new _1.CanisterRegistry();
    // Test it has an entry for wicp
    yield testRegistryMethods(canisterRegistry, WICP_ID);
    // get all
    const allCanisters = yield canisterRegistry.getAll();
    console.log('All Canisters', allCanisters);
    // getCanisterInfo,
    const canisterInfo = yield (0, _1.getCanisterInfo)({ canisterId: WICP_ID });
    console.log('Canister Info', canisterInfo);
    // getMultipleCanisterInfo,
    const multipleCanisterInfo = yield (0, _1.getMultipleCanisterInfo)({ canisterIds: [WICP_ID, CRONICS_ID] });
    console.log('Multiple canisters info', multipleCanisterInfo);
    // getAll: (agent: HttpAgent) => new CanisterRegistry(agent).getAll,
    const wrappedAll = yield (0, _1.getAll)();
    console.log('Wrapped All', wrappedAll.length);
    console.log('Does it contain cronics? ', wrappedAll.some(meta => meta.name === 'Cronic Critters'));
});
const handler = () => __awaiter(void 0, void 0, void 0, function* () {
    // const pid = 'hyirw-53nqf-uq735-tby2r-niqk7-2bhdu-bfup5-u3fjo-k2nym-qhe5r-pqe';
    // const dab = await getAllUserNFTs({ user: Principal.fromText(pid)});
    // const kya = await getCachedUserNFTs({ userPID: pid, refresh: true });
    // console.log('dab tokens', dab);
    //     console.log('kya tokens', kya, kya.length);
    // }
    const token = yield (0, _1.getTokenActor)({ canisterId: 'fjbi2-fyaaa-aaaan-qanjq-cai', standard: 'EXT', agent: new agent_1.HttpAgent({ fetch: cross_fetch_1.default, host: constants_1.IC_HOST }) });
    const tokenMeta = yield token.getMetadata();
    console.log('token meta', tokenMeta);
    // const actor = getNFTActor({ canisterId: 'ca4b4-uyaaa-aaaal-aac7a-cai', standard: 'DIP721v2', agent: new HttpAgent({ fetch, host: IC_HOST }) });
    // const details = await actor.getMetadata();
    // console.log('details', details);
});
handler();
