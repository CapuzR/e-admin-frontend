import { HttpAgent, ActorSubclass } from '@dfinity/agent';
import { IDL } from '@dfinity/candid';
import { Principal } from '@dfinity/principal';
declare type ExtendedActorConstructor = new () => ActorSubclass;
export declare type BaseMethodsExtendedActor<T> = {
    [K in keyof T as `_${Uncapitalize<string & K>}`]: T[K];
};
export declare const createExtendedActorClass: (agent: HttpAgent, methods: any, canisterId: string | Principal, IDLFactory: IDL.InterfaceFactory) => ExtendedActorConstructor;
export declare function generateActor<T>({ agent, canisterId, IDL }: {
    agent: HttpAgent;
    canisterId: string;
    IDL: IDL.InterfaceFactory;
}): ActorSubclass<T>;
declare const _default: {
    createExtendedActorClass: (agent: HttpAgent, methods: any, canisterId: string | Principal, IDLFactory: IDL.InterfaceFactory) => ExtendedActorConstructor;
    generateActor: typeof generateActor;
};
export default _default;
