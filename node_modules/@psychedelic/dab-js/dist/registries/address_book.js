"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAddress = exports.addAddress = exports.getAddresses = exports.getAddressBookActor = void 0;
const agent_1 = require("@dfinity/agent");
const address_book_did_1 = __importDefault(require("../idls/dab_registries/address_book.did"));
const CANISTER_ID = 'i73cm-daaaa-aaaah-abhea-cai';
const getAddressBookActor = (agent) => {
    const actor = agent_1.Actor.createActor(address_book_did_1.default, { agent, canisterId: CANISTER_ID });
    return actor;
};
exports.getAddressBookActor = getAddressBookActor;
const getAddresses = (agent) => __awaiter(void 0, void 0, void 0, function* () {
    const actor = (0, exports.getAddressBookActor)(agent);
    const addresses = yield actor.get_all();
    return addresses.map(address => ({
        name: address.name,
        description: address.description,
        emoji: address.emoji,
        value: address.value,
    }));
});
exports.getAddresses = getAddresses;
const addAddress = (agent, newAddress) => __awaiter(void 0, void 0, void 0, function* () {
    const actor = (0, exports.getAddressBookActor)(agent);
    const addResponse = yield actor.add({
        name: newAddress.name,
        description: newAddress.description,
        emoji: newAddress.emoji,
        value: newAddress.value,
    });
    return addResponse;
});
exports.addAddress = addAddress;
const removeAddress = (agent, addressName) => __awaiter(void 0, void 0, void 0, function* () {
    const actor = (0, exports.getAddressBookActor)(agent);
    const removeResponse = yield actor.remove(addressName);
    return removeResponse;
});
exports.removeAddress = removeAddress;
exports.default = {
    getAddressBookActor: exports.getAddressBookActor,
    getAddresses: exports.getAddresses,
    addAddress: exports.addAddress,
    removeAddress: exports.removeAddress,
};
