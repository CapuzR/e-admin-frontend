import { decodeResponse, encodeRequest, rpcBuilder } from './adapter';
import { injectBridgeIfNeed, nextId } from './bridge';

const BRIDGE_CALL = 'bridgeCall';

class MethodBuilder {
  private readonly bridge: string;
  private readonly method: string;

  constructor(bridge: string, method: string) {
    this.bridge = bridge;
    this.method = method;
  }

  async invoke<T>(...params: any): Promise<T> {
    injectBridgeIfNeed();
    const request = rpcBuilder(this.method, ...params);
    request.id = nextId();
    const result = await window._astrox_bridge_.bridgeCall(this.bridge, encodeRequest(request));
    return decodeResponse<T>(result);
  }
}

export const init = new MethodBuilder(BRIDGE_CALL, 'init');
export const connect = new MethodBuilder(BRIDGE_CALL, 'connect');
export const isConnected = new MethodBuilder(BRIDGE_CALL, 'isConnected');
export const disconnect = new MethodBuilder(BRIDGE_CALL, 'disconnect');
export const signMessage = new MethodBuilder(BRIDGE_CALL, 'signMessage');
export const requestTransfer = new MethodBuilder(BRIDGE_CALL, 'requestTransfer');
export const queryBalance = new MethodBuilder(BRIDGE_CALL, 'queryBalance');
export const appendAuth = new MethodBuilder(BRIDGE_CALL, 'appendAuth');
export const supportedStandardList = new MethodBuilder(BRIDGE_CALL, 'supportedStandardList');
