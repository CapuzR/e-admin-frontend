import { AbstractedClientStorage, IWalletConnector, TransferNFTWithIdentifier, TransferToken, Wallet } from '@astrox/sdk-core';
import { DelegationChain } from '@dfinity/identity';
import { ActorSubclass, HttpAgent, PublicKey, SignIdentity } from '@dfinity/agent';
import { Principal } from '@dfinity/principal';
import { InterfaceFactory } from '@dfinity/candid/lib/cjs/idl';
import { BalanceResponseObject, SupportedToken, TransactionResponse, WebViewConnectRequest } from './types';
export declare class AstroXWebViewHandler implements IWalletConnector {
    private _identity?;
    private _agent?;
    private _chain?;
    private _storage?;
    private _cacheKey?;
    private _wallet?;
    private _confirm?;
    principal: string | undefined;
    private _isReady;
    constructor(_identity?: SignIdentity, _agent?: HttpAgent, _chain?: DelegationChain, _storage?: AbstractedClientStorage, _cacheKey?: string, _wallet?: Wallet, _confirm?: boolean);
    private setCacheKey;
    private get cacheKey();
    private setWallet;
    get wallet(): Wallet;
    private setChain;
    private get chain();
    private setConfirm;
    private get confirm();
    private setIdentity;
    get identity(): SignIdentity;
    setAgent(value: HttpAgent): void;
    setHost(host: string): void;
    get agent(): HttpAgent;
    setStorage(storage: AbstractedClientStorage): void;
    get storage(): AbstractedClientStorage;
    private clear;
    private _injectWindow;
    private _initBridge;
    private fromStorage;
    isReady(): boolean;
    getDelegation(): DelegationChain;
    getPublicKey(): PublicKey;
    getPrincipal(): Principal;
    private _assertEnv;
    connect(params: WebViewConnectRequest): Promise<boolean>;
    reconnect(params: WebViewConnectRequest): Promise<boolean>;
    private _handleWebViewConnectResponse;
    getSupportedTokenList(): Promise<Array<SupportedToken>>;
    isConnected(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    signMessage(message: any): Promise<any>;
    requestTransfer(req: TransferNFTWithIdentifier | TransferToken): Promise<TransactionResponse>;
    queryBalance(): Promise<BalanceResponseObject[]>;
    config: any;
    createActor: <T>(canisterId: string, idlFactory: InterfaceFactory) => Promise<ActorSubclass<T>>;
    address(): {
        principal?: string;
        accountId?: string;
    };
    init(): Promise<any>;
}
//# sourceMappingURL=handler.d.ts.map