function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
import regeneratorRuntime from "regenerator-runtime";
import { decodeResponse, encodeRequest, rpcBuilder } from "./adapter";
import { injectBridgeIfNeed, nextId } from "./bridge";
var BRIDGE_CALL = "bridgeCall";
var MethodBuilder = /*#__PURE__*/ function() {
    "use strict";
    function MethodBuilder(bridge, method) {
        _classCallCheck(this, MethodBuilder);
        this.bridge = bridge;
        this.method = method;
    }
    var _proto = MethodBuilder.prototype;
    _proto.invoke = function invoke() {
        for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){
            params[_key] = arguments[_key];
        }
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var request, result;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        injectBridgeIfNeed();
                        request = rpcBuilder.apply(void 0, [
                            _this.method
                        ].concat(_toConsumableArray(params)));
                        request.id = nextId();
                        _ctx.next = 5;
                        return window._astrox_bridge_.bridgeCall(_this.bridge, encodeRequest(request));
                    case 5:
                        result = _ctx.sent;
                        return _ctx.abrupt("return", decodeResponse(result));
                    case 7:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    return MethodBuilder;
}();
export var init = new MethodBuilder(BRIDGE_CALL, "init");
export var connect = new MethodBuilder(BRIDGE_CALL, "connect");
export var isConnected = new MethodBuilder(BRIDGE_CALL, "isConnected");
export var disconnect = new MethodBuilder(BRIDGE_CALL, "disconnect");
export var signMessage = new MethodBuilder(BRIDGE_CALL, "signMessage");
export var requestTransfer = new MethodBuilder(BRIDGE_CALL, "requestTransfer");
export var queryBalance = new MethodBuilder(BRIDGE_CALL, "queryBalance");
export var appendAuth = new MethodBuilder(BRIDGE_CALL, "appendAuth");
export var supportedStandardList = new MethodBuilder(BRIDGE_CALL, "supportedStandardList");
