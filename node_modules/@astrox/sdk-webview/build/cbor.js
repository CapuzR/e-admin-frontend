// tslint:disable:max-classes-per-file
// This file is based on:
// tslint:disable-next-line: max-line-length
// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
import borc from "borc";
import * as cbor from "simple-cbor";
import { SelfDescribeCborSerializer } from "simple-cbor";
import { concat, fromHex } from "./buffer";
// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with
// encoding the uint64 values that the HTTP handler of the client expects for
// canister IDs. However, simple-cbor does not yet provide deserialization so
// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR
// decoder.
var PrincipalEncoder = /*#__PURE__*/ function() {
    "use strict";
    function PrincipalEncoder() {
        _classCallCheck(this, PrincipalEncoder);
    }
    var _proto = PrincipalEncoder.prototype;
    _proto.match = function match(value) {
        return value && value._isPrincipal === true;
    };
    _proto.encode = function encode(v) {
        return cbor.value.bytes(v.toUint8Array());
    };
    _createClass(PrincipalEncoder, [
        {
            key: "name",
            get: function get() {
                return "Principal";
            }
        },
        {
            key: "priority",
            get: function get() {
                return 0;
            }
        }
    ]);
    return PrincipalEncoder;
}();
var BufferEncoder = /*#__PURE__*/ function() {
    "use strict";
    function BufferEncoder() {
        _classCallCheck(this, BufferEncoder);
    }
    var _proto = BufferEncoder.prototype;
    _proto.match = function match(value) {
        return _instanceof(value, ArrayBuffer) || ArrayBuffer.isView(value);
    };
    _proto.encode = function encode(v) {
        return cbor.value.bytes(new Uint8Array(v));
    };
    _createClass(BufferEncoder, [
        {
            key: "name",
            get: function get() {
                return "Buffer";
            }
        },
        {
            key: "priority",
            get: function get() {
                return 1;
            }
        }
    ]);
    return BufferEncoder;
}();
var BigIntEncoder = /*#__PURE__*/ function() {
    "use strict";
    function BigIntEncoder() {
        _classCallCheck(this, BigIntEncoder);
    }
    var _proto = BigIntEncoder.prototype;
    _proto.match = function match(value) {
        return (typeof value === "undefined" ? "undefined" : _typeof(value)) === "bigint";
    };
    _proto.encode = function encode(v) {
        // Always use a bigint encoding.
        if (v > BigInt(0)) {
            return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));
        } else {
            return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt("-1") * v).toString(16))));
        }
    };
    _createClass(BigIntEncoder, [
        {
            key: "name",
            get: function get() {
                return "BigInt";
            }
        },
        {
            key: "priority",
            get: function get() {
                return 1;
            }
        }
    ]);
    return BigIntEncoder;
}();
var serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);
serializer.addEncoder(new PrincipalEncoder());
serializer.addEncoder(new BufferEncoder());
serializer.addEncoder(new BigIntEncoder());
export var CborTag;
(function(CborTag) {
    CborTag[CborTag["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
    CborTag[CborTag["Semantic"] = 55799] = "Semantic";
})(CborTag || (CborTag = {}));
/**
 * Encode a JavaScript value into CBOR.
 */ export function encode(value) {
    return serializer.serialize(value);
}
function decodePositiveBigInt(buf) {
    var len = buf.byteLength;
    var res = BigInt(0);
    for(var i = 0; i < len; i++){
        // tslint:disable-next-line:no-bitwise
        res = res * BigInt(0x100) + BigInt(buf[i]);
    }
    return res;
}
// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.
var Uint8ArrayDecoder = /*#__PURE__*/ function(_Decoder) {
    "use strict";
    _inherits(Uint8ArrayDecoder, _Decoder);
    var _super = _createSuper(Uint8ArrayDecoder);
    function Uint8ArrayDecoder() {
        _classCallCheck(this, Uint8ArrayDecoder);
        return _super.apply(this, arguments);
    }
    var _proto = Uint8ArrayDecoder.prototype;
    _proto.createByteString = function createByteString(raw) {
        return concat.apply(void 0, _toConsumableArray(raw));
    };
    _proto.createByteStringFromHeap = function createByteStringFromHeap(start, end) {
        if (start === end) {
            return new ArrayBuffer(0);
        }
        return new Uint8Array(this._heap.slice(start, end));
    };
    return Uint8ArrayDecoder;
}(borc.Decoder);
export function decode(input) {
    var buffer = new Uint8Array(input);
    var decoder = new Uint8ArrayDecoder({
        size: buffer.byteLength,
        tags: _defineProperty({
            // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).
            2: function(val) {
                return decodePositiveBigInt(val);
            },
            3: function(val) {
                return -decodePositiveBigInt(val);
            }
        }, CborTag.Semantic, function(value) {
            return value;
        })
    });
    return decoder.decodeFirst(buffer);
}
