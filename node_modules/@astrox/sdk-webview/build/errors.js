function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
export var BridgeErrors = /*#__PURE__*/ function() {
    "use strict";
    function BridgeErrors() {
        _classCallCheck(this, BridgeErrors);
    }
    BridgeErrors.fromErrorCode = function fromErrorCode(code) {
        var kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : BridgeErrors.defaultErrorKind, message = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : BridgeErrors.defaultErrorMessage;
        var defaultReturn = {
            kind: kind,
            text: "Unknown Error"
        };
        switch(code){
            case BridgeErrors.bridgeUnknownError:
                return {
                    kind: kind,
                    text: "Unknown Error: ".concat(message)
                };
            case BridgeErrors.bridgeIllegalArguments:
                return {
                    kind: kind,
                    text: "Illegal Arguments: ".concat(message)
                };
            case BridgeErrors.bridgeIllegalState:
                return {
                    kind: kind,
                    text: "Illegal State: ".concat(message)
                };
            case BridgeErrors.bridgeUnsupportedError:
                return {
                    kind: kind,
                    text: "Unsupported Error: ".concat(message)
                };
            case BridgeErrors.bridgeIdentityNotFound:
                return {
                    kind: kind,
                    text: "Identity Not Found: ".concat(message)
                };
            case BridgeErrors.bridgeIdentityExpired:
                return {
                    kind: kind,
                    text: "Identity Expired: ".concat(message)
                };
            case BridgeErrors.bridgeWalletNotFound:
                return {
                    kind: kind,
                    text: "Wallet Not Found: ".concat(message)
                };
            case BridgeErrors.bridgeOperationCancelled:
                return {
                    kind: kind,
                    text: "Operation Cancelled: ".concat(message)
                };
            case BridgeErrors.bridgeNFTIdentifierError:
                return {
                    kind: kind,
                    text: "NFT Identifier Error: ".concat(message)
                };
            case BridgeErrors.bridgeUnknownMethod:
                return {
                    kind: kind,
                    text: "Unknown method: ".concat(message)
                };
            default:
                return defaultReturn;
        }
    };
    return BridgeErrors;
}();
BridgeErrors.bridgeUnknownError = 50000;
BridgeErrors.bridgeIllegalArguments = 50001;
BridgeErrors.bridgeIllegalState = 50002;
BridgeErrors.bridgeUnsupportedError = 50003;
BridgeErrors.bridgeIdentityNotFound = 50004;
BridgeErrors.bridgeIdentityExpired = 50005;
BridgeErrors.bridgeWalletNotFound = 50006;
BridgeErrors.bridgeOperationCancelled = 50007;
BridgeErrors.bridgeNFTIdentifierError = 50008;
BridgeErrors.bridgeUnknownMethod = 50009;
BridgeErrors.defaultErrorKind = "JS-SDK-Error";
BridgeErrors.defaultErrorMessage = "No More Detail";
