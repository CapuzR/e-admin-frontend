/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable @typescript-eslint/no-non-null-assertion */ function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpreadProps(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
import regeneratorRuntime from "regenerator-runtime";
import { Actor, HttpAgent } from "@dfinity/agent";
import { AuthClient } from "./icAuthClient";
import { IDENTITY_PROVIDER_DEFAULT } from "./icStorage";
import { ICWindow } from "./icWindow";
import { LedgerConnection } from "../connections/ledgerConnection";
import { PermissionsType, SignerMessageKind, TransactionMessageKind } from "../types";
var days = BigInt(1);
var hours = BigInt(24);
var nanoseconds = BigInt(3600000000000);
var WALLET_PROVIDER_DEFAULT = "https://63k2f-nyaaa-aaaah-aakla-cai.raw.ic0.app";
var WALLET_PROVIDER_ENDPOINT = "#transaction";
var SIGNER_PROVIDER_DEFAULT = "https://63k2f-nyaaa-aaaah-aakla-cai.raw.ic0.app";
var SIGNER_PROVIDER_ENDPOINT = "#signer";
function targetsFilter(arr) {
    return arr.filter(function(value) {
        return typeof value === "string" && value.trim();
    });
}
var FRAME_SETTING = "height=600, width=800, top=0, right=0, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no";
var FRAME_SETTING_PAYMENT = "height=600, width=480, top=0, right=0, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no";
var _authClient = /*#__PURE__*/ new WeakMap(), _agent = /*#__PURE__*/ new WeakMap(), _localLedger = /*#__PURE__*/ new WeakMap(), _walletProvider = /*#__PURE__*/ new WeakMap(), _signerProvider = /*#__PURE__*/ new WeakMap(), _useFrame = /*#__PURE__*/ new WeakMap(), _loginOption = /*#__PURE__*/ new WeakMap(), _connectOptions = /*#__PURE__*/ new WeakMap();
export var IC = /*#__PURE__*/ function(ICWindow) {
    "use strict";
    _inherits(IC, ICWindow);
    var _super = _createSuper(IC);
    function IC(authClient, agent) {
        _classCallCheck(this, IC);
        var _this;
        _this = _super.call(this);
        _classPrivateFieldInit(_assertThisInitialized(_this), _authClient, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _agent, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _localLedger, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _walletProvider, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _signerProvider, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _useFrame, {
            writable: true,
            value: false
        }) // a local ledger to query balance only
        ;
        _classPrivateFieldInit(_assertThisInitialized(_this), _loginOption, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _connectOptions, {
            writable: true,
            value: void 0
        });
        var _this1 = _assertThisInitialized(_this);
        _this.disconnect = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var options, _args = arguments;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        options = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {};
                        _classPrivateFieldSet(_this1, _agent, undefined);
                        _classPrivateFieldSet(_this1, _localLedger, undefined);
                        _classPrivateFieldSet(_this1, _walletProvider, undefined);
                        _classPrivateFieldSet(_this1, _signerProvider, undefined);
                        _classPrivateFieldSet(_this1, _loginOption, undefined);
                        _classPrivateFieldSet(_this1, _connectOptions, undefined);
                        _ctx.next = 9;
                        return _this1.getAuthClient().logout(options);
                    case 9:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
        var _this2 = _assertThisInitialized(_this);
        _this.queryBalance = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var ref, result;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        ;
                        if (!(_this2.wallet === undefined)) {
                            _ctx.next = 3;
                            break;
                        }
                        throw Error("Wallet address is not found");
                    case 3:
                        if (!(_classPrivateFieldGet(_this2, _localLedger) === undefined)) {
                            _ctx.next = 5;
                            break;
                        }
                        throw Error("Ledger connection failed");
                    case 5:
                        _ctx.next = 7;
                        return (ref = _classPrivateFieldGet(_this2, _localLedger)) === null || ref === void 0 ? void 0 : ref.getBalance(_this2.wallet.accountId);
                    case 7:
                        result = _ctx.sent;
                        return _ctx.abrupt("return", result);
                    case 9:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }));
        var _this3 = _assertThisInitialized(_this);
        _this.handleAuthenticated = function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(param) {
                var ledgerCanisterId, ledgerHost, actorResult;
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            ledgerCanisterId = param.ledgerCanisterId, ledgerHost = param.ledgerHost;
                            _ctx.next = 3;
                            return LedgerConnection.createActor(_this3.getAuthClient().getDelegationIdentity(), ledgerCanisterId, ledgerHost);
                        case 3:
                            actorResult = _ctx.sent;
                            _classPrivateFieldSet(_this3, _localLedger, LedgerConnection.createConnection(_this3.getAuthClient().getInnerKey(), _this3.getAuthClient().getDelegationIdentity(), ledgerCanisterId, actorResult.actor, _classPrivateFieldGet(_this3, _agent)));
                        case 5:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(_) {
                return _ref.apply(this, arguments);
            };
        }();
        var _this4 = _assertThisInitialized(_this);
        _this.createActor = function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(idlFactory, canisterId) {
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            if (!(_classPrivateFieldGet(_this4, _authClient).getConfirm() === true && canisterId !== undefined && canisterId !== "")) {
                                _ctx.next = 3;
                                break;
                            }
                            _ctx.next = 3;
                            return _this4._appendAuth(canisterId);
                        case 3:
                            if (!_classPrivateFieldGet(_this4, _connectOptions).dev) {
                                _ctx.next = 6;
                                break;
                            }
                            _ctx.next = 6;
                            return _classPrivateFieldGet(_this4, _agent).fetchRootKey();
                        case 6:
                            return _ctx.abrupt("return", Actor.createActor(idlFactory, {
                                agent: _classPrivateFieldGet(_this4, _agent),
                                canisterId: canisterId
                            }));
                        case 7:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(idlFactory, canisterId) {
                return _ref.apply(this, arguments);
            };
        }();
        var _this5 = _assertThisInitialized(_this);
        // requestTransfer
        _this.requestTransfer = function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(options) {
                var ref, ref1, memo, standard, walletProviderUrl;
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            ;
                            memo = (ref = options.sendOpts) === null || ref === void 0 ? void 0 : ref.memo;
                            if (!memo) {
                                _ctx.next = 8;
                                break;
                            }
                            standard = options.standard.toUpperCase();
                            if (!(standard === "EXT" && !Array.isArray(memo))) {
                                _ctx.next = 6;
                                break;
                            }
                            throw new Error("`sendOpts.memo` only supports `Array<number>` type when the standard is `EXT`");
                        case 6:
                            if (!(standard === "ICP" && (typeof memo === "undefined" ? "undefined" : _typeof(memo)) !== "bigint")) {
                                _ctx.next = 8;
                                break;
                            }
                            throw new Error("`sendOpts.memo` only supports `bigint` type when the standard is `ICP`");
                        case 8:
                            console.assert(_this5.wallet !== undefined, "wallet address is not found");
                            walletProviderUrl = new URL((options === null || options === void 0 ? void 0 : (ref1 = options.walletProvider) === null || ref1 === void 0 ? void 0 : ref1.toString()) || _classPrivateFieldGet(_this5, _walletProvider) || WALLET_PROVIDER_DEFAULT);
                            walletProviderUrl.hash = WALLET_PROVIDER_ENDPOINT;
                            _this5._openWindow(walletProviderUrl.toString(), "icWindow", _classPrivateFieldGet(_this5, _useFrame) ? FRAME_SETTING_PAYMENT : undefined);
                            return _ctx.abrupt("return", new Promise(function(resolve, reject) {
                                _this5._eventHandler = _this5._getEventHandler(walletProviderUrl, resolve, reject, options);
                                window.addEventListener("message", _this5._eventHandler);
                            }));
                        case 13:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(options) {
                return _ref.apply(this, arguments);
            };
        }();
        var _this6 = _assertThisInitialized(_this);
        _this.signMessage = function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(options) {
                var ref, signerProviderUrl;
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            ;
                            console.assert(_this6.wallet !== undefined, "wallet address is not found");
                            signerProviderUrl = new URL((options === null || options === void 0 ? void 0 : (ref = options.signerProvider) === null || ref === void 0 ? void 0 : ref.toString()) || _classPrivateFieldGet(_this6, _signerProvider) || SIGNER_PROVIDER_DEFAULT);
                            signerProviderUrl.hash = SIGNER_PROVIDER_ENDPOINT;
                            _this6._openWindow(signerProviderUrl.toString(), "icWindow", _classPrivateFieldGet(_this6, _useFrame) ? FRAME_SETTING_PAYMENT : undefined);
                            return _ctx.abrupt("return", new Promise(function(resolve, reject) {
                                _this6._eventHandler = _this6._getSignerHandler(signerProviderUrl, resolve, reject, options);
                                window.addEventListener("message", _this6._eventHandler);
                            }));
                        case 6:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(options) {
                return _ref.apply(this, arguments);
            };
        }();
        _classPrivateFieldSet(_assertThisInitialized(_this), _authClient, authClient);
        _classPrivateFieldSet(_assertThisInitialized(_this), _agent, agent);
        _this.injectWindow();
        return _this;
    }
    var _proto = IC.prototype;
    _proto.connect = function connect(connectOptions) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var delegationModes, modes, hasNotInclude, ref, provider, delegationTargets, ref1, ref2;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        delegationModes = connectOptions.delegationModes;
                        if (!(delegationModes && delegationModes.length)) {
                            _ctx.next = 7;
                            break;
                        }
                        modes = [
                            "global",
                            "domain"
                        ];
                        hasNotInclude = delegationModes.some(function(v) {
                            return !modes.includes(v);
                        });
                        if (!hasNotInclude) {
                            _ctx.next = 6;
                            break;
                        }
                        throw new Error("`delegationModes` elements only support `global` and `private`");
                    case 6:
                        delegationModes = _toConsumableArray(new Set(delegationModes));
                    case 7:
                        ;
                        provider = (ref = connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.identityProvider) !== null && ref !== void 0 ? ref : IDENTITY_PROVIDER_DEFAULT;
                        delegationTargets = [
                            "ryjl3-tyaaa-aaaaa-aaaba-cai"
                        ];
                        if (connectOptions && (connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.delegationTargets)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.delegationTargets)));
                        }
                        if (connectOptions && (connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.ledgerCanisterId)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.ledgerCanisterId)));
                        }
                        if (connectOptions && (connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.whitelist)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.whitelist)));
                        }
                        delegationTargets = targetsFilter(_toConsumableArray(new Set(delegationTargets)));
                        _this._setConnectOptions(_objectSpreadProps(_objectSpread({}, connectOptions), {
                            delegationTargets: delegationTargets
                        }));
                        ;
                        _this._setLoginOptions(_objectSpreadProps(_objectSpread({}, connectOptions), {
                            identityProvider: provider,
                            // Maximum authorization expiration is 8 days
                            maxTimeToLive: (ref1 = connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.maxTimeToLive) !== null && ref1 !== void 0 ? ref1 : days * hours * nanoseconds,
                            permissions: (ref2 = connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.permissions) !== null && ref2 !== void 0 ? ref2 : [
                                PermissionsType.identity
                            ],
                            delegationTargets: delegationTargets,
                            delegationModes: delegationModes
                        }));
                        _ctx.next = 19;
                        return new Promise(function(resolve, reject) {
                            _this.getAuthClient().login(_objectSpreadProps(_objectSpread({}, _classPrivateFieldGet(_this, _loginOption)), {
                                onSuccess: _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                                    var ref, ref1, identity, _host, _ledgerHost;
                                    return regeneratorRuntime.wrap(function _callee$(_ctx) {
                                        while(1)switch(_ctx.prev = _ctx.next){
                                            case 0:
                                                ;
                                                identity = _this.getAuthClient().getIdentity();
                                                ;
                                                _classPrivateFieldSet(_this, _agent, new HttpAgent({
                                                    identity: identity,
                                                    host: (_host = connectOptions.host) !== null && _host !== void 0 ? _host : window.location.origin
                                                }));
                                                if (!connectOptions.dev) {
                                                    _ctx.next = 7;
                                                    break;
                                                }
                                                _ctx.next = 7;
                                                return _classPrivateFieldGet(_this, _agent).fetchRootKey();
                                            case 7:
                                                ;
                                                _ctx.next = 10;
                                                return _this.handleAuthenticated({
                                                    ledgerCanisterId: connectOptions.ledgerCanisterId,
                                                    ledgerHost: (_ledgerHost = connectOptions.ledgerHost) !== null && _ledgerHost !== void 0 ? _ledgerHost : "https://boundary.ic0.app/"
                                                });
                                            case 10:
                                                if (!(connectOptions === null || connectOptions === void 0 ? void 0 : connectOptions.onSuccess)) {
                                                    _ctx.next = 15;
                                                    break;
                                                }
                                                _ctx.next = 13;
                                                return connectOptions === null || connectOptions === void 0 ? void 0 : (ref = connectOptions.onSuccess) === null || ref === void 0 ? void 0 : ref.call(connectOptions);
                                            case 13:
                                                _ctx.next = 17;
                                                break;
                                            case 15:
                                                _ctx.next = 17;
                                                return connectOptions === null || connectOptions === void 0 ? void 0 : (ref1 = connectOptions.onAuthenticated) === null || ref1 === void 0 ? void 0 : ref1.call(connectOptions, _this);
                                            case 17:
                                                resolve(_this);
                                            case 18:
                                            case "end":
                                                return _ctx.stop();
                                        }
                                    }, _callee);
                                })),
                                onError: _this.handleError
                            }));
                        });
                    case 19:
                        return _ctx.abrupt("return", _this);
                    case 20:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _proto.isAuthenticated = function isAuthenticated() {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var result;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _classPrivateFieldGet(_this, _authClient).isAuthenticated();
                    case 2:
                        result = _ctx.sent;
                        return _ctx.abrupt("return", result);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _proto._setWalletProvider = function _setWalletProvider(provider) {
        _classPrivateFieldSet(this, _walletProvider, provider);
    };
    _proto._setSignerProvider = function _setSignerProvider(provider) {
        _classPrivateFieldSet(this, _signerProvider, provider);
    };
    _proto._setUseFrame = function _setUseFrame(useFrame) {
        _classPrivateFieldSet(this, _useFrame, useFrame);
    };
    _proto._setConnectOptions = function _setConnectOptions(options) {
        _classPrivateFieldSet(this, _connectOptions, options);
    };
    _proto._setLoginOptions = function _setLoginOptions(options) {
        _classPrivateFieldSet(this, _loginOption, options);
    };
    _proto.getAuthClient = function getAuthClient() {
        return _classPrivateFieldGet(this, _authClient);
    };
    _proto.injectWindow = function injectWindow() {
        if (window.ic !== undefined) {
            window.ic.astrox = this;
        } else {
            window.ic = {
                astrox: this
            };
        }
    };
    _proto._appendAuth = function _appendAuth(canisterId) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var currentTargets, newTargets;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        currentTargets = targetsFilter(_classPrivateFieldGet(_this, _authClient).getDelegateTargets());
                        if (!currentTargets.includes(canisterId)) {
                            _ctx.next = 5;
                            break;
                        }
                        return _ctx.abrupt("return", _this);
                    case 5:
                        newTargets = _toConsumableArray(currentTargets).concat([
                            canisterId
                        ]);
                        newTargets = targetsFilter(newTargets);
                        _this._setConnectOptions(_objectSpreadProps(_objectSpread({}, _classPrivateFieldGet(_this, _connectOptions)), {
                            delegationTargets: newTargets
                        }));
                        _this._setLoginOptions(_objectSpreadProps(_objectSpread({}, _classPrivateFieldGet(_this, _loginOption)), {
                            delegationTargets: newTargets
                        }));
                        _ctx.next = 11;
                        return new Promise(function(resolve, reject) {
                            _this.getAuthClient().login(_objectSpreadProps(_objectSpread({}, _classPrivateFieldGet(_this, _loginOption)), {
                                authType: "authorize-append",
                                delegationTargets: newTargets,
                                onSuccess: _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                                    var ref, ref1, ref2, ref3, ref4, ref5, ref6, identity, _host, ref7;
                                    return regeneratorRuntime.wrap(function _callee$(_ctx) {
                                        while(1)switch(_ctx.prev = _ctx.next){
                                            case 0:
                                                ;
                                                identity = _this.getAuthClient().getIdentity();
                                                ;
                                                _classPrivateFieldSet(_this, _agent, new HttpAgent({
                                                    identity: identity,
                                                    host: (_host = _classPrivateFieldGet(_this, _connectOptions).host) !== null && _host !== void 0 ? _host : window.location.origin
                                                }));
                                                if (!_classPrivateFieldGet(_this, _connectOptions).dev) {
                                                    _ctx.next = 7;
                                                    break;
                                                }
                                                _ctx.next = 7;
                                                return _classPrivateFieldGet(_this, _agent).fetchRootKey();
                                            case 7:
                                                ;
                                                _ctx.next = 10;
                                                return _this.handleAuthenticated({
                                                    ledgerCanisterId: (ref = _classPrivateFieldGet(_this, _connectOptions)) === null || ref === void 0 ? void 0 : ref.ledgerCanisterId,
                                                    ledgerHost: (ref7 = (ref1 = _classPrivateFieldGet(_this, _connectOptions)) === null || ref1 === void 0 ? void 0 : ref1.ledgerHost) !== null && ref7 !== void 0 ? ref7 : "https://boundary.ic0.app/"
                                                });
                                            case 10:
                                                _ctx.next = 12;
                                                return (ref2 = _classPrivateFieldGet(_this, _connectOptions)) === null || ref2 === void 0 ? void 0 : ref2.onSuccess;
                                            case 12:
                                                if (!_ctx.sent) {
                                                    _ctx.next = 17;
                                                    break;
                                                }
                                                _ctx.next = 15;
                                                return (ref3 = _classPrivateFieldGet(_this, _connectOptions)) === null || ref3 === void 0 ? void 0 : (ref4 = ref3.onSuccess) === null || ref4 === void 0 ? void 0 : ref4.call(ref3);
                                            case 15:
                                                _ctx.next = 19;
                                                break;
                                            case 17:
                                                _ctx.next = 19;
                                                return (ref5 = _classPrivateFieldGet(_this, _connectOptions)) === null || ref5 === void 0 ? void 0 : (ref6 = ref5.onAuthenticated) === null || ref6 === void 0 ? void 0 : ref6.call(ref5, _this);
                                            case 19:
                                                resolve(_this);
                                            case 20:
                                            case "end":
                                                return _ctx.stop();
                                        }
                                    }, _callee);
                                })),
                                onError: _this.handleError
                            }));
                        });
                    case 11:
                        return _ctx.abrupt("return", _ctx.sent);
                    case 12:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _proto.handleError = function handleError(error) {
        throw new Error(error);
    };
    _proto._getSignerHandler = function _getSignerHandler(walletProviderUrl, resolve, reject, options) {
        var _this = this;
        return function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
                var message, ref, _from, _maxTimeout, _successTimeout, request, _successTimeout1;
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            if (!(event.origin !== walletProviderUrl.origin)) {
                                _ctx.next = 2;
                                break;
                            }
                            return _ctx.abrupt("return");
                        case 2:
                            message = event.data;
                            _ctx.t0 = message.kind;
                            _ctx.next = _ctx.t0 === SignerMessageKind.ready ? 6 : _ctx.t0 === SignerMessageKind.success ? 11 : _ctx.t0 === SignerMessageKind.fail ? 13 : 15;
                            break;
                        case 6:
                            ;
                            ;
                            request = {
                                kind: SignerMessageKind.client,
                                from: (_from = options.from) !== null && _from !== void 0 ? _from : _this.wallet.accountId,
                                message: options.message,
                                maxTimeout: (_maxTimeout = options.maxTimeout) !== null && _maxTimeout !== void 0 ? _maxTimeout : 90,
                                successTimeout: (_successTimeout = options.successTimeout) !== null && _successTimeout !== void 0 ? _successTimeout : 10
                            };
                            (ref = _this._window) === null || ref === void 0 ? void 0 : ref.postMessage(request, walletProviderUrl.origin);
                            return _ctx.abrupt("break", 16);
                        case 11:
                            // Create the delegation chain and store it.
                            try {
                                ;
                                resolve(_this._handleSuccess(message, options.onSuccess, (_successTimeout1 = options.successTimeout) !== null && _successTimeout1 !== void 0 ? _successTimeout1 : 10));
                            } catch (err) {
                                reject(_this._handleFailure(err.message, options.onError));
                            }
                            return _ctx.abrupt("break", 16);
                        case 13:
                            reject(_this._handleFailure(message.text, options.onError));
                            return _ctx.abrupt("break", 16);
                        case 15:
                            return _ctx.abrupt("break", 16);
                        case 16:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(event) {
                return _ref.apply(this, arguments);
            };
        }();
    };
    _proto._getEventHandler = function _getEventHandler(walletProviderUrl, resolve, reject, options) {
        var _this = this;
        return function() {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
                var message, ref, request, _successTimeout;
                return regeneratorRuntime.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            if (!(event.origin !== walletProviderUrl.origin)) {
                                _ctx.next = 2;
                                break;
                            }
                            return _ctx.abrupt("return");
                        case 2:
                            message = event.data;
                            _ctx.t0 = message.kind;
                            _ctx.next = _ctx.t0 === TransactionMessageKind.ready ? 6 : _ctx.t0 === TransactionMessageKind.success ? 10 : _ctx.t0 === TransactionMessageKind.fail ? 12 : 14;
                            break;
                        case 6:
                            ;
                            request = {
                                kind: TransactionMessageKind.client,
                                sendData: _objectSpread({}, options)
                            };
                            (ref = _this._window) === null || ref === void 0 ? void 0 : ref.postMessage(request, walletProviderUrl.origin);
                            return _ctx.abrupt("break", 15);
                        case 10:
                            // Create the delegation chain and store it.
                            try {
                                ;
                                resolve(_this._handleSuccess(message, options.onSuccess, (_successTimeout = options.successTimeout) !== null && _successTimeout !== void 0 ? _successTimeout : 10));
                            } catch (err) {
                                reject(_this._handleFailure(err.message, options.onError));
                            }
                            return _ctx.abrupt("break", 15);
                        case 12:
                            reject(_this._handleFailure(message.text, options.onError));
                            return _ctx.abrupt("break", 15);
                        case 14:
                            return _ctx.abrupt("break", 15);
                        case 15:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }));
            return function(event) {
                return _ref.apply(this, arguments);
            };
        }();
    };
    _proto._handleFailure = function _handleFailure(errorMessage, onError) {
        this._remove();
        onError === null || onError === void 0 ? void 0 : onError(errorMessage);
        return errorMessage;
    };
    _proto._handleSuccess = function _handleSuccess(value, onSuccess, delay) {
        var _this = this;
        if (delay) {
            setTimeout(function() {
                return _this._remove();
            }, delay * 1000);
        } else {
            this._remove();
        }
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(value);
        return value;
    };
    IC.create = function create(config) {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var delegationTargets, authClient, identity, _host, agent, newIC, ref, _ledgerCanisterId, _ledgerHost, ref1, provider, ref2, ref3;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        delegationTargets = [
                            "ryjl3-tyaaa-aaaaa-aaaba-cai"
                        ];
                        if (config && (config === null || config === void 0 ? void 0 : config.delegationTargets)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(config === null || config === void 0 ? void 0 : config.delegationTargets)));
                        }
                        if (config && (config === null || config === void 0 ? void 0 : config.ledgerCanisterId)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(config === null || config === void 0 ? void 0 : config.ledgerCanisterId)));
                        }
                        if (config && (config === null || config === void 0 ? void 0 : config.whitelist)) {
                            delegationTargets = _toConsumableArray(new Set(delegationTargets.concat(config === null || config === void 0 ? void 0 : config.whitelist)));
                        }
                        delegationTargets = targetsFilter(_toConsumableArray(new Set(delegationTargets)));
                        _ctx.next = 7;
                        return AuthClient.create(_objectSpreadProps(_objectSpread({}, config), {
                            delegationTargets: delegationTargets,
                            idpWindowOption: config.useFrame === true ? FRAME_SETTING : undefined
                        }));
                    case 7:
                        authClient = _ctx.sent;
                        identity = authClient.getIdentity();
                        ;
                        agent = new HttpAgent({
                            identity: identity,
                            host: (_host = config.host) !== null && _host !== void 0 ? _host : window.location.origin
                        });
                        if (!config.dev) {
                            _ctx.next = 14;
                            break;
                        }
                        _ctx.next = 14;
                        return agent.fetchRootKey();
                    case 14:
                        newIC = new IC(authClient, agent);
                        newIC._setWalletProvider(config === null || config === void 0 ? void 0 : config.walletProviderUrl);
                        newIC._setSignerProvider(config === null || config === void 0 ? void 0 : config.signerProviderUrl);
                        newIC._setUseFrame(config === null || config === void 0 ? void 0 : config.useFrame);
                        _ctx.next = 20;
                        return newIC.isAuthenticated();
                    case 20:
                        if (!_ctx.sent) {
                            _ctx.next = 27;
                            break;
                        }
                        ;
                        ;
                        _ctx.next = 25;
                        return newIC.handleAuthenticated({
                            ledgerCanisterId: (_ledgerCanisterId = config.ledgerCanisterId) !== null && _ledgerCanisterId !== void 0 ? _ledgerCanisterId : "ryjl3-tyaaa-aaaaa-aaaba-cai",
                            ledgerHost: (_ledgerHost = config.ledgerHost) !== null && _ledgerHost !== void 0 ? _ledgerHost : "https://boundary.ic0.app/"
                        });
                    case 25:
                        _ctx.next = 27;
                        return config === null || config === void 0 ? void 0 : (ref = config.onAuthenticated) === null || ref === void 0 ? void 0 : ref.call(config, newIC);
                    case 27:
                        ;
                        provider = (ref1 = config === null || config === void 0 ? void 0 : config.identityProvider) !== null && ref1 !== void 0 ? ref1 : IDENTITY_PROVIDER_DEFAULT;
                        newIC._setConnectOptions(_objectSpreadProps(_objectSpread({}, config), {
                            dev: config.dev,
                            delegationTargets: delegationTargets
                        }));
                        ;
                        newIC._setLoginOptions(_objectSpreadProps(_objectSpread({}, config), {
                            identityProvider: provider,
                            // Maximum authorization expiration is 8 days
                            maxTimeToLive: (ref2 = config === null || config === void 0 ? void 0 : config.maxTimeToLive) !== null && ref2 !== void 0 ? ref2 : days * hours * nanoseconds,
                            permissions: (ref3 = config === null || config === void 0 ? void 0 : config.permissions) !== null && ref3 !== void 0 ? ref3 : [
                                PermissionsType.identity
                            ],
                            delegationTargets: delegationTargets
                        }));
                        return _ctx.abrupt("return", newIC);
                    case 33:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _createClass(IC, [
        {
            key: "identity",
            get: function get() {
                return _classPrivateFieldGet(this, _authClient).getIdentity();
            }
        },
        {
            key: "principal",
            get: function get() {
                return this.identity.getPrincipal();
            }
        },
        {
            key: "wallet",
            get: function get() {
                return _classPrivateFieldGet(this, _authClient).wallet;
            }
        },
        {
            key: "delegationTargets",
            get: function get() {
                return _classPrivateFieldGet(this, _authClient).getDelegateTargets();
            }
        },
        {
            key: "loginOption",
            get: function get() {
                return _classPrivateFieldGet(this, _loginOption);
            }
        },
        {
            key: "connectOptions",
            get: function get() {
                return _classPrivateFieldGet(this, _connectOptions);
            }
        }
    ]);
    return IC;
}(ICWindow);
