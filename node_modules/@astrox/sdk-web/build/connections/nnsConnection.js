/* eslint-disable @typescript-eslint/no-non-null-assertion */ /* eslint-disable @typescript-eslint/no-unused-vars */ function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
import regeneratorRuntime from "regenerator-runtime";
import { BaseConnection, executeWithLogging, _createActor } from "./baseConnection";
import nns_idl from "../canisters/nns-dapp.idl";
import nns_idl_cert from "../canisters/nns-dapp-cert.idl";
import { NNS_CANISTER_ID } from "../utils/constants";
export var NNSConnection = /*#__PURE__*/ function(BaseConnection) {
    "use strict";
    _inherits(NNSConnection, BaseConnection);
    var _super = _createSuper(NNSConnection);
    function NNSConnection(identity, delegationIdentity, actor, agent, nnsCanisterId) {
        _classCallCheck(this, NNSConnection);
        var _this;
        _this = _super.call(this, identity, delegationIdentity, nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl, actor, agent);
        _this.identity = identity;
        _this.delegationIdentity = delegationIdentity;
        _this.actor = actor;
        _this.agent = agent;
        return _this;
    }
    var _proto = NNSConnection.prototype;
    /**
   * get NNS Actor, used internally
   * @param nnsCanisterId
   * @function {function name}
   * @returns {type} {description}
   */ _proto.getNNSActor = function getNNSActor(nnsCanisterId) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this._getActor(nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl);
                    case 2:
                        actor = _ctx.sent;
                        return _ctx.abrupt("return", actor);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    /**
   * get NNS Actor, used internally
   * @param nnsCanisterId
   * @function {function name}
   * @returns {type} {description}
   */ _proto.getNNSActorCert = function getNNSActorCert(nnsCanisterId) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this._getActor(nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl_cert);
                    case 2:
                        actor = _ctx.sent;
                        return _ctx.abrupt("return", actor);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    /**
   * when NNSConnection is created, we can get account created to NNS.
   * Even we can just calculate the login principal to NNS DApp, however,
   * The NNS DApp stores and create account, thus, a new Identity login will get NO ACCOUNT created by default.
   * We need to manually create account using `add_account` when no account found.
   *
   * @param cert
   * @function {function name}
   * @returns {type} {description}
   */ _proto.getAccount = function getAccount(cert) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor, response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        if (!(cert === true)) {
                            _ctx.next = 6;
                            break;
                        }
                        _ctx.next = 3;
                        return _this.getNNSActorCert();
                    case 3:
                        _ctx.t0 = _ctx.sent;
                        _ctx.next = 9;
                        break;
                    case 6:
                        _ctx.next = 8;
                        return _this.getNNSActor();
                    case 8:
                        _ctx.t0 = _ctx.sent;
                    case 9:
                        actor = _ctx.t0;
                        _ctx.next = 12;
                        return executeWithLogging(function() {
                            return actor.get_account();
                        });
                    case 12:
                        response = _ctx.sent;
                        _this._accountDetails = response["Ok"];
                        return _ctx.abrupt("return", response["Ok"]);
                    case 15:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    /**
   * create account when new identity logined to NNS
   * @function {function name}
   * @returns {type} {description}
   */ _proto.addAccount = function addAccount() {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor, response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this.getNNSActor();
                    case 2:
                        actor = _ctx.sent;
                        _ctx.next = 5;
                        return executeWithLogging(function() {
                            return actor.add_account();
                        });
                    case 5:
                        response = _ctx.sent;
                        return _ctx.abrupt("return", response);
                    case 7:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    /**
   * create connection
   * @param identity
   * @param delegationIdentity
   * @param actor
   * @param agent
   * @function createConnection
   * @returns {NNSConnection}
   */ NNSConnection.createConnection = function createConnection(identity, delegationIdentity, actor, agent) {
        return new NNSConnection(identity, delegationIdentity, actor, agent);
    };
    /**
   * create Actor with DelegationIdentity
   * @param delegationIdentity
   * @param nnsCanisterId
   * @function {function name}
   * @returns {type} {description}
   */ NNSConnection.createActor = function createActor(delegationIdentity, nnsCanisterId) {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _createActor(nns_idl, nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, delegationIdentity);
                    case 2:
                        actor = _ctx.sent;
                        return _ctx.abrupt("return", actor);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    NNSConnection.getTransactions = function getTransactions(param, param1) {
        var nnsActor = param.nnsActor, delegationIdentity = param.delegationIdentity, page_size = param1.page_size, offset = param1.offset, account_identifier = param1.account_identifier;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor, result;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        if (!(nnsActor !== null && nnsActor !== void 0)) {
                            _ctx.next = 4;
                            break;
                        }
                        _ctx.t0 = nnsActor;
                        _ctx.next = 7;
                        break;
                    case 4:
                        _ctx.next = 6;
                        return NNSConnection.createActor(delegationIdentity);
                    case 6:
                        _ctx.t0 = _ctx.sent.actor;
                    case 7:
                        actor = _ctx.t0;
                        _ctx.next = 10;
                        return actor.get_transactions({
                            page_size: page_size,
                            offset: offset,
                            account_identifier: account_identifier
                        });
                    case 10:
                        result = _ctx.sent;
                        return _ctx.abrupt("return", result);
                    case 12:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _createClass(NNSConnection, [
        {
            key: "accountDetails",
            get: function get() {
                return this._accountDetails;
            }
        }
    ]);
    return NNSConnection;
} // export const requestNNSDelegation = async (
 //   identity: SignIdentity,
 // ): Promise<DelegationIdentity> => {
 //   const tenMinutesInMsec = 10 * 1000 * 60;
 //   const date = new Date(Date.now() + tenMinutesInMsec);
 //   return requestDelegation(identity, { canisterId, date });
 // };
(BaseConnection);
