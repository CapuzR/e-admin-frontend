function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
import regeneratorRuntime from "regenerator-runtime";
import { BaseConnection, executeWithLogging, _createActor } from "./baseConnection";
import ledger_idl from "../canisters/ledger.idl";
import { LEDGER_CANISTER_ID } from "../utils/constants";
export var LedgerConnection = /*#__PURE__*/ function(BaseConnection) {
    "use strict";
    _inherits(LedgerConnection, BaseConnection);
    var _super = _createSuper(LedgerConnection);
    function LedgerConnection(identity, delegationIdentity, actor, agent, legerCanisterId) {
        _classCallCheck(this, LedgerConnection);
        var _this;
        _this = _super.call(this, identity, delegationIdentity, legerCanisterId !== null && legerCanisterId !== void 0 ? legerCanisterId : LEDGER_CANISTER_ID, ledger_idl, actor, agent);
        _this.identity = identity;
        _this.delegationIdentity = delegationIdentity;
        _this.actor = actor;
        _this.agent = agent;
        return _this;
    }
    var _proto = LedgerConnection.prototype;
    /**
   * get NNS Actor, used internally
   * @param canisterId
   * @param ledgerCanisterId
   * @function {function name}
   * @returns {type} {description}
   */ _proto.getLedgerActor = function getLedgerActor(ledgerCanisterId) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this._getActor(ledgerCanisterId !== null && ledgerCanisterId !== void 0 ? ledgerCanisterId : LEDGER_CANISTER_ID, ledger_idl);
                    case 2:
                        actor = _ctx.sent;
                        return _ctx.abrupt("return", actor);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _proto.getBalance = function getBalance(account) {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor, response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this.getLedgerActor();
                    case 2:
                        actor = _ctx.sent;
                        _ctx.next = 5;
                        return executeWithLogging(function() {
                            return actor.account_balance_dfx({
                                account: account
                            });
                        });
                    case 5:
                        response = _ctx.sent;
                        return _ctx.abrupt("return", response.e8s);
                    case 7:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    _proto.send = function send(param) {
        var to = param.to, amount = param.amount, sendOpts = param.sendOpts;
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor, response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this.getLedgerActor();
                    case 2:
                        actor = _ctx.sent;
                        _ctx.next = 5;
                        return executeWithLogging(function() {
                            var ref;
                            var defaultFee = BigInt(10000);
                            var defaultMemo = BigInt(Math.floor(Math.random() * 10000));
                            var subAccount = (sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.from_subaccount) === undefined ? [] : Array.from([
                                sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.from_subaccount
                            ]);
                            var createAtTime = (sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.created_at_time) === undefined ? [] : Array.from([
                                {
                                    timestamp_nanos: BigInt(sendOpts === null || sendOpts === void 0 ? void 0 : (ref = sendOpts.created_at_time) === null || ref === void 0 ? void 0 : ref.getTime())
                                }, 
                            ]);
                            var ref1, ref2;
                            var sendArgs = {
                                to: to,
                                fee: {
                                    e8s: (ref1 = sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.fee) !== null && ref1 !== void 0 ? ref1 : defaultFee
                                },
                                amount: {
                                    e8s: amount
                                },
                                memo: (ref2 = sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.memo) !== null && ref2 !== void 0 ? ref2 : defaultMemo,
                                from_subaccount: subAccount,
                                created_at_time: createAtTime
                            };
                            return actor.send_dfx(sendArgs);
                        });
                    case 5:
                        response = _ctx.sent;
                        return _ctx.abrupt("return", response);
                    case 7:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    /**
   * create connection
   * @param identity
   * @param delegationIdentity
   * @param legerCanisterId
   * @param actor
   * @param agent
   * @function createConnection
   * @returns {LedgerConnection}
   */ LedgerConnection.createConnection = function createConnection(identity, delegationIdentity, legerCanisterId, actor, agent) {
        return new LedgerConnection(identity, delegationIdentity, actor, agent, legerCanisterId !== null && legerCanisterId !== void 0 ? legerCanisterId : LEDGER_CANISTER_ID);
    };
    /**
   * create Actor with DelegationIdentity
   * @param delegationIdentity
   * @param canisterId
   * @param ledgerCanisterId
   * @param host
   * @function {function name}
   * @returns {type} {description}
   */ LedgerConnection.createActor = function createActor(delegationIdentity, ledgerCanisterId, host) {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actor;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _createActor(ledger_idl, ledgerCanisterId !== null && ledgerCanisterId !== void 0 ? ledgerCanisterId : LEDGER_CANISTER_ID, delegationIdentity, host);
                    case 2:
                        actor = _ctx.sent;
                        return _ctx.abrupt("return", actor);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    LedgerConnection.createConnectionWithII = function createConnectionWithII(identity, delegationIdentity, legerCanisterId) {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var actorResult;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return LedgerConnection.createActor(delegationIdentity);
                    case 2:
                        actorResult = _ctx.sent;
                        return _ctx.abrupt("return", LedgerConnection.createConnection(identity, delegationIdentity, legerCanisterId !== null && legerCanisterId !== void 0 ? legerCanisterId : LEDGER_CANISTER_ID, actorResult.actor, actorResult.agent));
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    LedgerConnection.actorGetBalance = function actorGetBalance(actor, account) {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return executeWithLogging(function() {
                            return actor.account_balance_dfx({
                                account: account
                            });
                        });
                    case 2:
                        response = _ctx.sent;
                        return _ctx.abrupt("return", response.e8s);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    LedgerConnection.actorSend = function actorSend(actor, param) {
        var to = param.to, amount = param.amount, sendOpts = param.sendOpts;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var response;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return executeWithLogging(function() {
                            var ref;
                            var defaultFee = BigInt(10000);
                            var defaultMemo = BigInt(Math.floor(Math.random() * 10000));
                            var subAccount = (sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.from_subaccount) === undefined ? [] : Array.from([
                                sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.from_subaccount
                            ]);
                            var createAtTime = (sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.created_at_time) === undefined ? [] : Array.from([
                                {
                                    timestamp_nanos: BigInt(sendOpts === null || sendOpts === void 0 ? void 0 : (ref = sendOpts.created_at_time) === null || ref === void 0 ? void 0 : ref.getTime())
                                }, 
                            ]);
                            var ref1, ref2;
                            var sendArgs = {
                                to: to,
                                fee: {
                                    e8s: (ref1 = sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.fee) !== null && ref1 !== void 0 ? ref1 : defaultFee
                                },
                                amount: {
                                    e8s: amount
                                },
                                memo: (ref2 = sendOpts === null || sendOpts === void 0 ? void 0 : sendOpts.memo) !== null && ref2 !== void 0 ? ref2 : defaultMemo,
                                from_subaccount: subAccount,
                                created_at_time: createAtTime
                            };
                            return actor.send_dfx(sendArgs);
                        });
                    case 2:
                        response = _ctx.sent;
                        return _ctx.abrupt("return", response);
                    case 4:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    };
    return LedgerConnection;
} // export const requestNNSDelegation = async (
 //   identity: SignIdentity,
 // ): Promise<DelegationIdentity> => {
 //   const tenMinutesInMsec = 10 * 1000 * 60;
 //   const date = new Date(Date.now() + tenMinutesInMsec);
 //   return requestDelegation(identity, { canisterId, date });
 // };
(BaseConnection);
