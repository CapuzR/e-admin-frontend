/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ export default function(param) {
    var IDL = param.IDL;
    var InternetIdentityInit = IDL.Record({
        assigned_user_number_range: IDL.Tuple(IDL.Nat64, IDL.Nat64)
    });
    var UserNumber = IDL.Nat64;
    var PublicKey = IDL.Vec(IDL.Nat8);
    var DeviceKey = PublicKey;
    var KeyType = IDL.Variant({
        platform: IDL.Null,
        seed_phrase: IDL.Null,
        cross_platform: IDL.Null,
        unknown: IDL.Null
    });
    var Purpose = IDL.Variant({
        authentication: IDL.Null,
        recovery: IDL.Null
    });
    var CredentialId = IDL.Vec(IDL.Nat8);
    var DeviceData = IDL.Record({
        alias: IDL.Text,
        pubkey: DeviceKey,
        key_type: KeyType,
        purpose: Purpose,
        credential_id: IDL.Opt(CredentialId)
    });
    var FrontendHostname = IDL.Text;
    var SessionKey = PublicKey;
    var Timestamp = IDL.Nat64;
    var Delegation = IDL.Record({
        pubkey: PublicKey,
        targets: IDL.Opt(IDL.Vec(IDL.Principal)),
        expiration: Timestamp
    });
    var SignedDelegation = IDL.Record({
        signature: IDL.Vec(IDL.Nat8),
        delegation: Delegation
    });
    var GetDelegationResponse = IDL.Variant({
        no_such_delegation: IDL.Null,
        signed_delegation: SignedDelegation
    });
    var HeaderField = IDL.Tuple(IDL.Text, IDL.Text);
    var HttpRequest = IDL.Record({
        url: IDL.Text,
        method: IDL.Text,
        body: IDL.Vec(IDL.Nat8),
        headers: IDL.Vec(HeaderField)
    });
    var Token = IDL.Record({});
    var StreamingCallbackHttpResponse = IDL.Record({
        token: IDL.Opt(Token),
        body: IDL.Vec(IDL.Nat8)
    });
    var StreamingStrategy = IDL.Variant({
        Callback: IDL.Record({
            token: Token,
            callback: IDL.Func([
                Token
            ], [
                StreamingCallbackHttpResponse
            ], [
                "query"
            ])
        })
    });
    var HttpResponse = IDL.Record({
        body: IDL.Vec(IDL.Nat8),
        headers: IDL.Vec(HeaderField),
        streaming_strategy: IDL.Opt(StreamingStrategy),
        status_code: IDL.Nat16
    });
    var UserKey = PublicKey;
    var ProofOfWork = IDL.Record({
        nonce: IDL.Nat64,
        timestamp: Timestamp
    });
    var RegisterResponse = IDL.Variant({
        canister_full: IDL.Null,
        registered: IDL.Record({
            user_number: UserNumber
        })
    });
    var InternetIdentityStats = IDL.Record({
        users_registered: IDL.Nat64,
        assigned_user_number_range: IDL.Tuple(IDL.Nat64, IDL.Nat64)
    });
    return IDL.Service({
        add: IDL.Func([
            UserNumber,
            DeviceData
        ], [], []),
        get_delegation: IDL.Func([
            UserNumber,
            FrontendHostname,
            SessionKey,
            Timestamp
        ], [
            GetDelegationResponse
        ], [
            "query"
        ]),
        http_request: IDL.Func([
            HttpRequest
        ], [
            HttpResponse
        ], [
            "query"
        ]),
        init_salt: IDL.Func([], [], []),
        lookup: IDL.Func([
            UserNumber
        ], [
            IDL.Vec(DeviceData)
        ], [
            "query"
        ]),
        prepare_delegation: IDL.Func([
            UserNumber,
            FrontendHostname,
            SessionKey,
            IDL.Opt(IDL.Nat64)
        ], [
            UserKey,
            Timestamp
        ], []),
        register: IDL.Func([
            DeviceData,
            ProofOfWork
        ], [
            RegisterResponse
        ], []),
        remove: IDL.Func([
            UserNumber,
            DeviceKey
        ], [], []),
        stats: IDL.Func([], [
            InternetIdentityStats
        ], [
            "query"
        ])
    });
};
export var init = function(param) {
    var IDL = param.IDL;
    var InternetIdentityInit = IDL.Record({
        assigned_user_number_range: IDL.Tuple(IDL.Nat64, IDL.Nat64)
    });
    return [
        IDL.Opt(InternetIdentityInit)
    ];
};
