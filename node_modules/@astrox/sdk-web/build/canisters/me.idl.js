export default function(param) {
    var IDL = param.IDL;
    var DeviceType = IDL.Variant({
        "IdentityProvider": IDL.Null,
        "SecurityDevice": IDL.Null,
        "EthereumMetaMask": IDL.Null
    });
    var Purpose = IDL.Variant({
        "authentication": IDL.Null,
        "recovery": IDL.Null
    });
    var CredentialId = IDL.Vec(IDL.Nat8);
    var DeviceDataExternal = IDL.Record({
        "device_name": IDL.Text,
        "device_type": DeviceType,
        "pub_key": IDL.Text,
        "purpose": Purpose,
        "credential_id": IDL.Opt(CredentialId)
    });
    var DeviceAddResponse = IDL.Variant({
        "added": IDL.Record({
            "user_name": IDL.Text
        }),
        "failed": IDL.Null
    });
    var PublicKey = IDL.Vec(IDL.Nat8);
    var SessionKey = PublicKey;
    var Timestamp = IDL.Nat64;
    var Delegation = IDL.Record({
        "pubkey": PublicKey,
        "targets": IDL.Opt(IDL.Vec(IDL.Principal)),
        "expiration": Timestamp
    });
    var SignedDelegation = IDL.Record({
        "signature": IDL.Vec(IDL.Nat8),
        "delegation": Delegation
    });
    var GetDelegationResponse = IDL.Variant({
        "no_such_delegation": IDL.Null,
        "signed_delegation": SignedDelegation
    });
    var UserKey = PublicKey;
    var GetDelegationResponseQr = IDL.Record({
        "user_key": UserKey,
        "extra": IDL.Text,
        "get_delegation_response": GetDelegationResponse
    });
    var AccountIdentifier = IDL.Text;
    var HardwareWalletAccountDetails = IDL.Record({
        "principal": IDL.Principal,
        "name": IDL.Text,
        "account_identifier": AccountIdentifier
    });
    var SubAccount = IDL.Vec(IDL.Nat8);
    var SubAccountDetails = IDL.Record({
        "name": IDL.Text,
        "sub_account": SubAccount,
        "account_identifier": AccountIdentifier
    });
    var AccountDetails = IDL.Record({
        "principal": IDL.Principal,
        "account_identifier": AccountIdentifier,
        "hardware_wallet_accounts": IDL.Vec(HardwareWalletAccountDetails),
        "sub_accounts": IDL.Vec(SubAccountDetails)
    });
    var AccountDetailsResult = IDL.Record({
        "account_details": IDL.Opt(AccountDetails),
        "anchor_number": IDL.Text
    });
    var RoleType = IDL.Variant({
        "Sub": IDL.Null,
        "Main": IDL.Null
    });
    var DeviceKey = PublicKey;
    var DeviceData = IDL.Record({
        "device_name": IDL.Text,
        "device_type": DeviceType,
        "pub_key": DeviceKey,
        "purpose": Purpose,
        "credential_id": IDL.Opt(CredentialId)
    });
    var Profile = IDL.Record({
        "user_name": IDL.Text,
        "role_type": RoleType,
        "devices": IDL.Vec(DeviceData)
    });
    var IPProfile = IDL.Record({
        "user_name": IDL.Text,
        "role_type": RoleType,
        "devices": IDL.Vec(DeviceData)
    });
    var RegisterResponse = IDL.Variant({
        "canister_full": IDL.Null,
        "registered": IDL.Record({
            "user_name": IDL.Text
        })
    });
    var DeviceRemoveResponse = IDL.Variant({
        "failed": IDL.Null,
        "removed": IDL.Null
    });
    var UpdateNNSWalletResponse = IDL.Variant({
        "success": IDL.Null,
        "failed": IDL.Null
    });
    return IDL.Service({
        "add_ii_anchor_number": IDL.Func([
            IDL.Text,
            DeviceType,
            IDL.Text
        ], [
            IDL.Vec(IDL.Text)
        ], []),
        "add_new_device": IDL.Func([
            DeviceDataExternal,
            IDL.Text,
            DeviceType
        ], [
            DeviceAddResponse
        ], []),
        "get_delegation": IDL.Func([
            IDL.Text,
            DeviceType,
            IDL.Text,
            SessionKey,
            Timestamp
        ], [
            GetDelegationResponse
        ], [
            "query"
        ]),
        "get_delegation_qr": IDL.Func([
            IDL.Text
        ], [
            IDL.Opt(GetDelegationResponseQr)
        ], [
            "query"
        ]),
        "get_ii_anchor_number_by_name": IDL.Func([
            IDL.Text
        ], [
            IDL.Vec(IDL.Text)
        ], [
            "query"
        ]),
        "get_nns_wallets": IDL.Func([
            IDL.Text,
            IDL.Opt(IDL.Text)
        ], [
            IDL.Vec(AccountDetailsResult)
        ], [
            "query"
        ]),
        "get_profile_by_name": IDL.Func([
            IDL.Text
        ], [
            IDL.Opt(Profile),
            IDL.Vec(Profile),
            IDL.Vec(IPProfile)
        ], [
            "query"
        ]),
        "prepare_delegation": IDL.Func([
            IDL.Text,
            DeviceType,
            IDL.Text,
            SessionKey,
            IDL.Opt(IDL.Nat64)
        ], [
            UserKey,
            Timestamp
        ], []),
        "prepare_delegation_qr": IDL.Func([
            IDL.Text,
            IDL.Text,
            DeviceType,
            IDL.Text,
            SessionKey,
            IDL.Opt(IDL.Nat64),
            IDL.Text, 
        ], [
            UserKey,
            Timestamp
        ], []),
        "register_user_main": IDL.Func([
            IDL.Text,
            DeviceDataExternal
        ], [
            RegisterResponse
        ], []),
        "unbind_device": IDL.Func([
            IDL.Text,
            IDL.Text,
            DeviceType
        ], [
            DeviceRemoveResponse
        ], []),
        "update_nns_wallets": IDL.Func([
            IDL.Text,
            DeviceType,
            IDL.Text,
            AccountDetails
        ], [
            UpdateNNSWalletResponse
        ], [])
    });
};
export var init = function(param) {
    var IDL = param.IDL;
    return [];
};
