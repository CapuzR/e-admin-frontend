import { AuthClient } from "@dfinity/auth-client";
import { ActorSubclass } from "@dfinity/agent";
import type { IConnector } from "./connectors";
import { ConnectError, CreateActorError, DisconnectError, InitError } from "./connectors";
declare class InternetIdentity implements IConnector {
    #private;
    meta: {
        features: never[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get principal(): string | undefined;
    get client(): AuthClient | undefined;
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        host: string;
        providerUrl: string;
        dev: boolean;
    });
    get config(): {
        whitelist: string[];
        host: string;
        providerUrl: string;
        dev: boolean;
    };
    init(): Promise<import("neverthrow").Ok<{
        isConnected: boolean;
    }, never> | import("neverthrow").Err<never, {
        kind: InitError;
    }>>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: any, idlFactory: any): Promise<import("neverthrow").Err<never, {
        kind: CreateActorError;
    }> | import("neverthrow").Ok<ActorSubclass<Service>, never>>;
    connect(): Promise<import("neverthrow").Ok<boolean, never> | import("neverthrow").Err<never, {
        kind: ConnectError;
    }>>;
    disconnect(): Promise<import("neverthrow").Ok<boolean, never> | import("neverthrow").Err<never, {
        kind: DisconnectError;
    }>>;
}
export { InternetIdentity, };
