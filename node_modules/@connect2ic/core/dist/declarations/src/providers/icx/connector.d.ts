import type { IDL } from "@dfinity/candid";
import type { ActorSubclass } from "@dfinity/agent";
import type { IConnector, IWalletConnector } from "../connectors";
import { Result } from "neverthrow";
import { BalanceError, ConnectError, CreateActorError, DisconnectError, InitError, TransferError } from "../connectors";
declare class ICX implements IConnector, IWalletConnector {
    #private;
    meta: {
        features: string[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get principal(): string | undefined;
    get wallets(): ({
        principal: string;
        accountId: string;
    } | undefined)[];
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        host: string;
        dev: boolean;
    });
    get config(): {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        host: string;
        dev: boolean;
    };
    init(): Promise<import("neverthrow").Ok<{
        isConnected: boolean;
    }, never> | import("neverthrow").Err<never, {
        kind: InitError;
    }>>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory, config?: {}): Promise<Result<ActorSubclass<Service>, {
        kind: CreateActorError;
    }>>;
    connect(): Promise<import("neverthrow").Ok<boolean, never> | import("neverthrow").Err<never, {
        kind: ConnectError;
    }>>;
    disconnect(): Promise<import("neverthrow").Ok<boolean, never> | import("neverthrow").Err<never, {
        kind: DisconnectError;
    }>>;
    requestTransferNFT(args: {
        tokenIdentifier: string;
        tokenIndex: number;
        canisterId: string;
        to: string;
        standard: "ICP" | "DIP20" | "EXT" | "DRC20" | string;
    }): Promise<import("neverthrow").Ok<any, never> | import("neverthrow").Err<never, {
        kind: TransferError;
    }>>;
    requestTransfer(args: any): Promise<import("neverthrow").Err<never, {
        kind: TransferError;
    }> | import("neverthrow").Ok<any, never>>;
    queryBalance(): Promise<import("neverthrow").Err<never, {
        kind: BalanceError;
    }> | import("neverthrow").Ok<import("@astrox/sdk-webview/build/types").BalanceResponseObject[], never>>;
}
export { ICX, };
