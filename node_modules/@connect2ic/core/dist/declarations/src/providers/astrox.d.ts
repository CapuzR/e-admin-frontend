import type { IDL } from "@dfinity/candid";
import type { ActorSubclass } from "@dfinity/agent";
import type { IConnector, IWalletConnector } from "./connectors";
import { Result } from "neverthrow";
import { BalanceError, ConnectError, CreateActorError, DisconnectError, InitError, TransferError } from "./connectors";
declare class AstroX implements IConnector, IWalletConnector {
    #private;
    meta: {
        features: string[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get principal(): string | undefined;
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        noUnify?: boolean | undefined;
        host: string;
        dev: boolean;
    });
    get config(): {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        noUnify?: boolean | undefined;
        host: string;
        dev: boolean;
    };
    init(): Promise<import("neverthrow").Ok<{
        isConnected: boolean;
    }, never> | import("neverthrow").Err<never, {
        kind: InitError;
    }>>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<Result<ActorSubclass<Service>, {
        kind: CreateActorError;
    }>>;
    connect(): Promise<import("neverthrow").Err<never, {
        kind: ConnectError;
    }> | import("neverthrow").Ok<boolean, never>>;
    disconnect(): Promise<import("neverthrow").Ok<boolean, never> | import("neverthrow").Err<never, {
        kind: DisconnectError;
    }>>;
    address(): {
        principal: string | undefined;
    };
    requestTransfer(opts: {
        amount: number;
        to: string;
        standard?: string;
        symbol?: string;
        decimals?: number;
    }): Promise<import("neverthrow").Err<never, {
        kind: TransferError;
    }> | import("neverthrow").Ok<{
        height: number;
    }, never>>;
    queryBalance(): Promise<import("neverthrow").Ok<{
        amount: number;
        canisterId: string;
        decimals: number;
        name: string;
        symbol: string;
    }[], never> | import("neverthrow").Err<never, {
        kind: BalanceError;
    }>>;
}
export { AstroX, };
